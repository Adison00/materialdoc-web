{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is this site about? \u00b6 We feel there's a huge disconnect between google material design guidelines and developers docs. After collecting feedback on Google+ and Reddit we decided to make a site with a single list of available material components and samples of their usage. What are you planning to cover? \u00b6 We want to describe how to use and style material components with google appcompat and design libraries. Later we will prepare tutorials of how to make widgets which are not available in google material spec/links to open source libraries. What is different between app compat and design library? \u00b6 v7 appcompat library - provide support of material design user interface implementations for older Android platforms. design library - provides various material design components which are not part of Android SDK. Who are the authors? \u00b6 Dmytro Danylyk Yakiv Mospan Sa\u00fal Molinero Roman Danylyk Volodymyr Yatsykiv Miguel Catalan Ba\u00f1uls Luis G. Valle Sa\u00fal D\u00edaz Gonz\u00e1lez Antonio Leiva Alexandru Simonescu Paresh Mayani Gonzalo Toledano Want to help? \u00b6 Share this website to social media Star our repository github.com/materialdoc Write or edit article and send pull request to master branch. (Make sure you have read how to contribute section)","title":"About"},{"location":"#what-is-this-site-about","text":"We feel there's a huge disconnect between google material design guidelines and developers docs. After collecting feedback on Google+ and Reddit we decided to make a site with a single list of available material components and samples of their usage.","title":"What is this site about?"},{"location":"#what-are-you-planning-to-cover","text":"We want to describe how to use and style material components with google appcompat and design libraries. Later we will prepare tutorials of how to make widgets which are not available in google material spec/links to open source libraries.","title":"What are you planning to cover?"},{"location":"#what-is-different-between-app-compat-and-design-library","text":"v7 appcompat library - provide support of material design user interface implementations for older Android platforms. design library - provides various material design components which are not part of Android SDK.","title":"What is different between app compat and design library?"},{"location":"#who-are-the-authors","text":"Dmytro Danylyk Yakiv Mospan Sa\u00fal Molinero Roman Danylyk Volodymyr Yatsykiv Miguel Catalan Ba\u00f1uls Luis G. Valle Sa\u00fal D\u00edaz Gonz\u00e1lez Antonio Leiva Alexandru Simonescu Paresh Mayani Gonzalo Toledano","title":"Who are the authors?"},{"location":"#want-to-help","text":"Share this website to social media Star our repository github.com/materialdoc Write or edit article and send pull request to master branch. (Make sure you have read how to contribute section)","title":"Want to help?"},{"location":"application/","text":"Android Application \u00b6 I am happy to announce that we just released open source Android application which includes all source code (layouts, styles, colors) of materialdoc.com tutorials. You can download apk and check how material components will look on different Android versions.","title":"Application"},{"location":"application/#android-application","text":"I am happy to announce that we just released open source Android application which includes all source code (layouts, styles, colors) of materialdoc.com tutorials. You can download apk and check how material components will look on different Android versions.","title":"Android Application"},{"location":"article-template/","text":"Article name \u00b6 From the Google material design documentation Always in the beginning of your article, you have to mention the section in the material design spec which talks about the component, pattern or animation that you talking about. How to add/implement ? \u00b6 I. Try to write small steps, if possible, always accompanied by a copy-paste ready block of code. public class MainActivity extends AppCompatActivity { ... } II. All sentences should be end with a dot [.] III. Use the three ` symbol with the name of the language in order to highlight a block code. // block of code Note This is a small note, informing that this step could be realized in a different way, or just an important note regarding the last step Compatibility issues \u00b6 Some components, animations, patterns have different behaviors in different API version. It would be nice to write a small paragraph about it. If show images about the differences better. How to Style ? \u00b6 If components can be customized describe how to do this.","title":"Article name"},{"location":"article-template/#article-name","text":"From the Google material design documentation Always in the beginning of your article, you have to mention the section in the material design spec which talks about the component, pattern or animation that you talking about.","title":"Article name"},{"location":"article-template/#how-to-addimplement","text":"I. Try to write small steps, if possible, always accompanied by a copy-paste ready block of code. public class MainActivity extends AppCompatActivity { ... } II. All sentences should be end with a dot [.] III. Use the three ` symbol with the name of the language in order to highlight a block code. // block of code Note This is a small note, informing that this step could be realized in a different way, or just an important note regarding the last step","title":"How to add/implement ?"},{"location":"article-template/#compatibility-issues","text":"Some components, animations, patterns have different behaviors in different API version. It would be nice to write a small paragraph about it. If show images about the differences better.","title":"Compatibility issues"},{"location":"article-template/#how-to-style","text":"If components can be customized describe how to do this.","title":"How to Style ?"},{"location":"how-to-contribute/","text":"How to contribute \u00b6 If you want to edit an article, at the top right corner of every page there is Pencil icon. If you want to write a new article. Create article-name.md file based on article-template . Put this file inside /docs/components or /docs/patterns folder. Put images inside /docs/images/ folder. Add article reference to mkdocs.ymld file. When ready send pull request to master branch. Preview \u00b6 If you want to preview your article in browser, you have to install mkdocs.js.org and run local server. cd materialdoc mkdocs serve","title":"Contribute"},{"location":"how-to-contribute/#how-to-contribute","text":"If you want to edit an article, at the top right corner of every page there is Pencil icon. If you want to write a new article. Create article-name.md file based on article-template . Put this file inside /docs/components or /docs/patterns folder. Put images inside /docs/images/ folder. Add article reference to mkdocs.ymld file. When ready send pull request to master branch.","title":"How to contribute"},{"location":"how-to-contribute/#preview","text":"If you want to preview your article in browser, you have to install mkdocs.js.org and run local server. cd materialdoc mkdocs serve","title":"Preview"},{"location":"not_found/","text":"Ooops \u00b6 Material Doc ...I really wanted, more than anything else, to show you this article, but it does not exist yet. Maybe you are the right person to write it? If so, make sure you read \" how to contribute \" section.","title":"Ooops"},{"location":"not_found/#ooops","text":"Material Doc ...I really wanted, more than anything else, to show you this article, but it does not exist yet. Maybe you are the right person to write it? If so, make sure you read \" how to contribute \" section.","title":"Ooops"},{"location":"components/autocomplete/","text":"From Google Material Design documentation. Use auto-complete text fields to present real-time suggestions or completions in dropdowns, so users can enter information more accurately and efficiently. How to add? \u00b6 I. Declare your AutoCompleteTextView inside any layout.xml . <AutoCompleteTextView android:id= \"@+id/autocompleteView\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"Search dogs...\" /> II. Define a string-array that contains all text suggestions in a file inside res/values directory. <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <string-array name= \"dogs_list\" > <item> Bichon Frise </item> <item> Border Collie </item> <item> Border Terrier </item> <item> Boxer </item> <item> Chihuahua </item> <item> German Shepherd </item> <item> Golden Retriever </item> <item> Greyhound </item> </string-array> </resources> III. Define a filterable list adapter to manage the auto completion data list. int layoutItemId = android . R . layout . simple_dropdown_item_1line ; String [] dogArr = getResources (). getStringArray ( R . array . dogs_list ); List < String > dogList = Arrays . asList ( dogsArr ); ArrayAdapter < String > adapter = new ArrayAdapter <>( this , layoutItemId , dogList ); AutoCompleteTextView autocompleteView = ( AutoCompleteTextView ) findViewById ( R . id . autocompleteView ); autocompleteView . setAdapter ( adapter ); How to style? \u00b6 I. Declare custom styles in your styles.xml file. <style name= \"Autocomplete\" parent= \"Widget.AppCompat.Light.AutoCompleteTextView\" > <item name= \"android:background\" > @color/green500 </item> <item name= \"colorControlNormal\" > @color/amber500 </item> <item name= \"colorControlActivated\" > @color/cyan500 </item> </style> II. Apply this style to the AutoCompleteTextView via android:theme attribute. <AutoCompleteTextView android:id= \"@+id/autocomplete_dogs\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:theme= \"@style/Autocomplete\" android:hint= \"Search dogs...\" /> Drop down anchor \u00b6 By default, the dropdown list with your filtered data appear just below the AutoCompleteTextView . To change this position use dropDownAnchor attribute and reference another view id. <AutoCompleteTextView android:id= \"@+id/autocomplete_dogs\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:theme= \"@style/Autocomplete\" android:hint= \"Search dogs...\" android:dropDownAnchor= \"@+id/header\" android:dropDownWidth= \"match_parent\" /> Custom Adapter \u00b6 To fully customize the dropdown list you need to provide your own Adapter . It needs to implement Filterable and ListAdapter interfaces. The easiest way to achieve this is by extending ArrayAdapter which already implements both interfaces. I. Create a custom adapter extending ArrayAdapter class. class AutoCompleteDogsAdapter extends ArrayAdapter < Dog > { ... } II. Create a custom filter extending Filter class and provide your own filtering logic overriding performFiltering method. class DogsFilter extends Filter { AutoCompleteDogsAdapter adapter ; List < Dog > originalList ; List < Dog > filteredList ; public DogsFilter ( AutoCompleteDogsAdapter adapter , List < Dog > originalList ) { super (); this . adapter = adapter ; this . originalList = originalList ; this . filteredList = new ArrayList <>(); } @Override protected FilterResults performFiltering ( CharSequence constraint ) { filteredList . clear (); final FilterResults results = new FilterResults (); if ( constraint == null || constraint . length () == 0 ) { filteredList . addAll ( originalList ); } else { final String filterPattern = constraint . toString (). toLowerCase (). trim (); // Your filtering logic goes in here for ( final Dog dog : originalList ) { if ( dog . breed . toLowerCase (). contains ( filterPattern )) { filteredList . add ( dog ); } } } results . values = filteredList ; results . count = filteredList . size (); return results ; } @Override protected void publishResults ( CharSequence constraint , FilterResults results ) { adapter . filteredDogs . clear (); adapter . filteredDogs . addAll (( List ) results . values ); adapter . notifyDataSetChanged (); } } III. Provide your custom filter from your adapter class by overriding getFilter() method. class AutoCompleteDogsAdapter extends ArrayAdapter < Dog > { private final List < Dog > dogs ; private List < Dog > filteredDogs = new ArrayList <>(); public AutoCompleteDogsAdapter ( Context context , List < Dog > dogs ) { super ( context , 0 , dogs ); this . dogs = dogs ; } @Override public int getCount () { return filteredDogs . size (); } @Override public Filter getFilter () { return new DogsFilter ( this , dogs ); } @Override public View getView ( int position , View convertView , ViewGroup parent ) { // Get the data item from filtered list. Dog dog = filteredDogs . get ( position ); // Inflate your custom row layout as usual. LayoutInflater inflater = LayoutInflater . from ( getContext ()); convertView = inflater . inflate ( R . layout . row_dog , parent , false ); TextView tvName = ( TextView ) convertView . findViewById ( R . id . row_breed ); ImageView ivIcon = ( ImageView ) convertView . findViewById ( R . id . row_icon ); tvName . setText ( dog . breed ); ivIcon . setImageResource ( dog . drawable ); return convertView ; }","title":"Auto-complete"},{"location":"components/autocomplete/#how-to-add","text":"I. Declare your AutoCompleteTextView inside any layout.xml . <AutoCompleteTextView android:id= \"@+id/autocompleteView\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"Search dogs...\" /> II. Define a string-array that contains all text suggestions in a file inside res/values directory. <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <string-array name= \"dogs_list\" > <item> Bichon Frise </item> <item> Border Collie </item> <item> Border Terrier </item> <item> Boxer </item> <item> Chihuahua </item> <item> German Shepherd </item> <item> Golden Retriever </item> <item> Greyhound </item> </string-array> </resources> III. Define a filterable list adapter to manage the auto completion data list. int layoutItemId = android . R . layout . simple_dropdown_item_1line ; String [] dogArr = getResources (). getStringArray ( R . array . dogs_list ); List < String > dogList = Arrays . asList ( dogsArr ); ArrayAdapter < String > adapter = new ArrayAdapter <>( this , layoutItemId , dogList ); AutoCompleteTextView autocompleteView = ( AutoCompleteTextView ) findViewById ( R . id . autocompleteView ); autocompleteView . setAdapter ( adapter );","title":"How to add?"},{"location":"components/autocomplete/#how-to-style","text":"I. Declare custom styles in your styles.xml file. <style name= \"Autocomplete\" parent= \"Widget.AppCompat.Light.AutoCompleteTextView\" > <item name= \"android:background\" > @color/green500 </item> <item name= \"colorControlNormal\" > @color/amber500 </item> <item name= \"colorControlActivated\" > @color/cyan500 </item> </style> II. Apply this style to the AutoCompleteTextView via android:theme attribute. <AutoCompleteTextView android:id= \"@+id/autocomplete_dogs\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:theme= \"@style/Autocomplete\" android:hint= \"Search dogs...\" />","title":"How to style?"},{"location":"components/autocomplete/#drop-down-anchor","text":"By default, the dropdown list with your filtered data appear just below the AutoCompleteTextView . To change this position use dropDownAnchor attribute and reference another view id. <AutoCompleteTextView android:id= \"@+id/autocomplete_dogs\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:theme= \"@style/Autocomplete\" android:hint= \"Search dogs...\" android:dropDownAnchor= \"@+id/header\" android:dropDownWidth= \"match_parent\" />","title":"Drop down anchor"},{"location":"components/autocomplete/#custom-adapter","text":"To fully customize the dropdown list you need to provide your own Adapter . It needs to implement Filterable and ListAdapter interfaces. The easiest way to achieve this is by extending ArrayAdapter which already implements both interfaces. I. Create a custom adapter extending ArrayAdapter class. class AutoCompleteDogsAdapter extends ArrayAdapter < Dog > { ... } II. Create a custom filter extending Filter class and provide your own filtering logic overriding performFiltering method. class DogsFilter extends Filter { AutoCompleteDogsAdapter adapter ; List < Dog > originalList ; List < Dog > filteredList ; public DogsFilter ( AutoCompleteDogsAdapter adapter , List < Dog > originalList ) { super (); this . adapter = adapter ; this . originalList = originalList ; this . filteredList = new ArrayList <>(); } @Override protected FilterResults performFiltering ( CharSequence constraint ) { filteredList . clear (); final FilterResults results = new FilterResults (); if ( constraint == null || constraint . length () == 0 ) { filteredList . addAll ( originalList ); } else { final String filterPattern = constraint . toString (). toLowerCase (). trim (); // Your filtering logic goes in here for ( final Dog dog : originalList ) { if ( dog . breed . toLowerCase (). contains ( filterPattern )) { filteredList . add ( dog ); } } } results . values = filteredList ; results . count = filteredList . size (); return results ; } @Override protected void publishResults ( CharSequence constraint , FilterResults results ) { adapter . filteredDogs . clear (); adapter . filteredDogs . addAll (( List ) results . values ); adapter . notifyDataSetChanged (); } } III. Provide your custom filter from your adapter class by overriding getFilter() method. class AutoCompleteDogsAdapter extends ArrayAdapter < Dog > { private final List < Dog > dogs ; private List < Dog > filteredDogs = new ArrayList <>(); public AutoCompleteDogsAdapter ( Context context , List < Dog > dogs ) { super ( context , 0 , dogs ); this . dogs = dogs ; } @Override public int getCount () { return filteredDogs . size (); } @Override public Filter getFilter () { return new DogsFilter ( this , dogs ); } @Override public View getView ( int position , View convertView , ViewGroup parent ) { // Get the data item from filtered list. Dog dog = filteredDogs . get ( position ); // Inflate your custom row layout as usual. LayoutInflater inflater = LayoutInflater . from ( getContext ()); convertView = inflater . inflate ( R . layout . row_dog , parent , false ); TextView tvName = ( TextView ) convertView . findViewById ( R . id . row_breed ); ImageView ivIcon = ( ImageView ) convertView . findViewById ( R . id . row_icon ); tvName . setText ( dog . breed ); ivIcon . setImageResource ( dog . drawable ); return convertView ; }","title":"Custom Adapter"},{"location":"components/bottom-navigation/","text":"Bottom navigation \u00b6 From google material design documentation . Bottom navigation bars make it easy to explore and switch between top-level views in a single tap. How to add? \u00b6 I. In your build.gradle add latest design and appcompat libraries. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' compile 'com.android.support:design:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare navigation items in menu file. <menu xmlns:android= \"http://schemas.android.com/apk/res/android\" > <item android:id= \"@+id/recents\" android:title= \"Recents\" android:icon= \"@drawable/ic_history_24dp\" /> <item android:id= \"@+id/favorites\" android:title= \"Favorites\" android:icon= \"@drawable/ic_favorite_24dp\" /> <item android:id= \"@+id/nearby\" android:title= \"Nearby\" android:icon= \"@drawable/ic_place_24dp\" /> </menu> IV. Declare BottomNavigationView inside your layout.xml file. <android.support.design.widget.BottomNavigationView android:id= \"@+id/bottomNavigationView\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" app:menu= \"@menu/bottom_navigation_menu\" /> How to style? \u00b6 I. Define custom color for navigation bar. <selector xmlns:android= \"http://schemas.android.com/apk/res/android\" > <item android:state_checked= \"false\" android:color= \"@color/pink\" /> <item android:color= \"@android:color/white\" /> </selector> II. Define custom backgrounds for navigation bar items. // res/drawable, to support devices lower then 21 API <selector xmlns:android= \"http://schemas.android.com/apk/res/android\" > <item android:state_pressed= \"true\" android:drawable= \"@android:color/white\" /> <item android:drawable= \"@android:color/transparent\" /> </selector> // res/drawable-v21 folder, for devices greater or equal then 21 API <ripple xmlns:android= \"http://schemas.android.com/apk/res/android\" android:color= \"@android:color/white\" > </ripple> III. Declare custom style in your styles.xml file. <style name= \"BottomNavigation\" > <item name= \"android:background\" > @color/indigo </item> <item name= \"itemBackground\" > @drawable/navigation_bar_item_bg </item> <item name= \"itemIconTint\" > @color/navigation_bar_txt_color </item> <item name= \"itemTextColor\" > @color/navigation_bar_txt_color </item> <item name= \"paddingStart\" > @dimen/bottom_navigation_padding </item> <item name= \"paddingEnd\" > @dimen/bottom_navigation_padding </item> </style> IV. Apply this style to your BottomNavigationView via style attribute. <android.support.design.widget.BottomNavigationView android:id= \"@+id/bottomNavigationView\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" app:menu= \"@menu/bottom_navigation_menu\" style= \"@style/BottomNavigation\" /> Handle item selection \u00b6 BottomNavigationView bottomNavigationView ; // ... bottomNavigationView . setOnNavigationItemSelectedListener ( new OnNavigationItemSelectedListener () { @Override public boolean onNavigationItemSelected ( @NonNull MenuItem item ) { if ( item . getItemId () == R . id . favorites ) { // on favorites clicked return true ; } return false ; } }); Select item programmatically \u00b6 BottomNavigationView navigationView ; // ... navigationView = ( BottomNavigationView ) findViewById ( R . id . bottomNavigationView ); navigationView . getMenu (). getItem ( itemToSelect ). setChecked ( true ); Get selected item \u00b6 There is no API to get selected item. Instead you can : I. Get menu from BottomNavigationView and search for checked item. BottomNavigationView bottomNavigationView ; // ... int getSelectedItem () { Menu menu = bottomNavigationView . getMenu (); for ( int i = 0 ; i < menu . size (); i ++) { if ( menu . getItem ( i ). isChecked ()) { return i ; } } return 0 ; } II. Add global selectedItem variable and update it each time you do select item programmatically and each time you receive OnNavigationItemSelected event.","title":"Bottom navigation"},{"location":"components/bottom-navigation/#bottom-navigation","text":"From google material design documentation . Bottom navigation bars make it easy to explore and switch between top-level views in a single tap.","title":"Bottom navigation"},{"location":"components/bottom-navigation/#how-to-add","text":"I. In your build.gradle add latest design and appcompat libraries. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' compile 'com.android.support:design:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare navigation items in menu file. <menu xmlns:android= \"http://schemas.android.com/apk/res/android\" > <item android:id= \"@+id/recents\" android:title= \"Recents\" android:icon= \"@drawable/ic_history_24dp\" /> <item android:id= \"@+id/favorites\" android:title= \"Favorites\" android:icon= \"@drawable/ic_favorite_24dp\" /> <item android:id= \"@+id/nearby\" android:title= \"Nearby\" android:icon= \"@drawable/ic_place_24dp\" /> </menu> IV. Declare BottomNavigationView inside your layout.xml file. <android.support.design.widget.BottomNavigationView android:id= \"@+id/bottomNavigationView\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" app:menu= \"@menu/bottom_navigation_menu\" />","title":"How to add?"},{"location":"components/bottom-navigation/#how-to-style","text":"I. Define custom color for navigation bar. <selector xmlns:android= \"http://schemas.android.com/apk/res/android\" > <item android:state_checked= \"false\" android:color= \"@color/pink\" /> <item android:color= \"@android:color/white\" /> </selector> II. Define custom backgrounds for navigation bar items. // res/drawable, to support devices lower then 21 API <selector xmlns:android= \"http://schemas.android.com/apk/res/android\" > <item android:state_pressed= \"true\" android:drawable= \"@android:color/white\" /> <item android:drawable= \"@android:color/transparent\" /> </selector> // res/drawable-v21 folder, for devices greater or equal then 21 API <ripple xmlns:android= \"http://schemas.android.com/apk/res/android\" android:color= \"@android:color/white\" > </ripple> III. Declare custom style in your styles.xml file. <style name= \"BottomNavigation\" > <item name= \"android:background\" > @color/indigo </item> <item name= \"itemBackground\" > @drawable/navigation_bar_item_bg </item> <item name= \"itemIconTint\" > @color/navigation_bar_txt_color </item> <item name= \"itemTextColor\" > @color/navigation_bar_txt_color </item> <item name= \"paddingStart\" > @dimen/bottom_navigation_padding </item> <item name= \"paddingEnd\" > @dimen/bottom_navigation_padding </item> </style> IV. Apply this style to your BottomNavigationView via style attribute. <android.support.design.widget.BottomNavigationView android:id= \"@+id/bottomNavigationView\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" app:menu= \"@menu/bottom_navigation_menu\" style= \"@style/BottomNavigation\" />","title":"How to style?"},{"location":"components/bottom-navigation/#handle-item-selection","text":"BottomNavigationView bottomNavigationView ; // ... bottomNavigationView . setOnNavigationItemSelectedListener ( new OnNavigationItemSelectedListener () { @Override public boolean onNavigationItemSelected ( @NonNull MenuItem item ) { if ( item . getItemId () == R . id . favorites ) { // on favorites clicked return true ; } return false ; } });","title":"Handle item selection"},{"location":"components/bottom-navigation/#select-item-programmatically","text":"BottomNavigationView navigationView ; // ... navigationView = ( BottomNavigationView ) findViewById ( R . id . bottomNavigationView ); navigationView . getMenu (). getItem ( itemToSelect ). setChecked ( true );","title":"Select item programmatically"},{"location":"components/bottom-navigation/#get-selected-item","text":"There is no API to get selected item. Instead you can : I. Get menu from BottomNavigationView and search for checked item. BottomNavigationView bottomNavigationView ; // ... int getSelectedItem () { Menu menu = bottomNavigationView . getMenu (); for ( int i = 0 ; i < menu . size (); i ++) { if ( menu . getItem ( i ). isChecked ()) { return i ; } } return 0 ; } II. Add global selectedItem variable and update it each time you do select item programmatically and each time you receive OnNavigationItemSelected event.","title":"Get selected item"},{"location":"components/bottom-sheets/","text":"Bottom Sheets \u00b6 From google material design documentation . A bottom sheet is a sheet of material that slides up from the bottom edge of the screen. Bottom sheets are displayed only as a result of a user-initiated action, and can be swiped up to reveal additional content. A bottom sheet can be a temporary modal surface or a persistent structural element of an app. How to add? \u00b6 I. In your build.gradle add latest appcompat and design libraries. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version compile 'com.android.support:design:X.X.X' // where X.X.X version } II. Set the app:layout_behavior attribute with the value @string/bottom_sheet_behavior which will allow your view or viewgroup appear as a bottom sheet. <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"300dp\" android:orientation= \"vertical\" android:padding= \"16dp\" app:layout_behavior= \"@string/bottom_sheet_behavior\" > <TextView android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Dandelion Chocolate\" android:textAppearance= \"@style/TextAppearance.AppCompat.Display1\" android:textColor= \"@android:color/black\" /> </LinearLayout> Note You can use the behavior_peekHeight attribute to set the default height of the bottom sheet. III. Add your view which implements the bottom sheet behavior as a direct child of a CoordinatorLayout . <?xml version=\"1.0\" encoding=\"utf-8\"?> <android.support.design.widget.CoordinatorLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:tools= \"http://schemas.android.com/tools\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" tools:context= \".MainActivity\" > <android.support.design.widget.AppBarLayout android:id= \"@+id/appbarLayout\" android:layout_width= \"match_parent\" android:layout_height= \"?attr/actionBarSize\" android:theme= \"@style/ThemeOverlay.AppCompat.Dark.ActionBar\" > <android.support.v7.widget.Toolbar android:id= \"@+id/appbar\" android:layout_height= \"?attr/actionBarSize\" android:layout_width= \"match_parent\" android:minHeight= \"?attr/actionBarSize\" android:background= \"?attr/colorPrimary\" app:elevation= \"4dp\" android:theme= \"@style/ThemeOverlay.AppCompat.Dark.ActionBar\" app:popupTheme= \"@style/ThemeOverlay.AppCompat.Light\" > </android.support.v7.widget.Toolbar> </android.support.design.widget.AppBarLayout> <!-- Your content --> <include layout= \"@layout/content_main\" /> <!-- Bottom Sheet --> <include layout= \"@layout/bottom_sheets_main\" /> </android.support.design.widget.CoordinatorLayout> Note You can wrap your views and viewgroups under <include> tags in order to keep clean your layouts. IV. Get a reference of BottomSheetBehavior with a reference of the view which has the bottom behavior set. Use the from method of BottomSheetBehavior . LinearLayout bottomSheetViewgroup = ( LinearLayout ) findViewById ( R . id . bottom_sheet ); BottomSheetBehavior bottomSheetBehavior = BottomSheetBehavior . from ( bottomSheetViewgroup ); VI. To expand your bottom sheet use setState method with BottomSheetBehavior.STATE_EXPANDED parameter. bottomSheetBehavior . setState ( BottomSheetBehavior . STATE_EXPANDED ); You can handle these states via the setState method: STATE_EXPANDED : To completely expand the bottom sheet. STATE_HIDE : To completely hide the bottom sheet. STATE_COLLAPSED : To set the bottom sheet height with the value set on the peekHeight attribute. Modal bottom sheets \u00b6 From google material design documentation . Modal bottom sheets are alternatives to menus or simple dialogs. They can also present deep-linked content from other apps. They are primarily for mobile. I. Create a class extending the BottomSheetDialogFragment inflated with a layout which will be used as the content of your modal bottom sheet. public class ModalBottomSheet extends BottomSheetDialogFragment { static BottomSheetDialogFragment newInstance () { return new BottomSheetDialogFragment (); } @Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View v = inflater . inflate ( R . layout . bottom_sheet_modal , container , false ); return v ; } } II. Create an instance of your modal bottom sheet and show it with the show method with a SupportFragmentManager and a String as parameters. ModalBottomSheet modalBottomSheet = new ModalBottomSheet (); modalBottomSheet . show ( getSupportFragmentManager (), \"bottom sheet\" ); How to anchor views? \u00b6 I. Add the view that will be anchored to the bottom sheet as a direct child of the CoordinatorLayout <android.support.design.widget.FloatingActionButton android:id= \"@+id/fab\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_margin= \"@dimen/fab_margin\" android:src= \"@android:drawable/ic_dialog_email\" /> II. Reference the id of the view wich has set the BottomSheetBehavior with the layout_anchor attribute. <android.support.design.widget.FloatingActionButton android:id= \"@+id/fab\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_margin= \"@dimen/fab_margin\" android:src= \"@android:drawable/ic_dialog_email\" app:layout_anchor= \"@id/app_bar\" /> III. Configure the layout_anchorGravity attribute with the desired gravity. <android.support.design.widget.FloatingActionButton android:id= \"@+id/fab\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_margin= \"@dimen/fab_margin\" android:src= \"@android:drawable/ic_dialog_email\" app:layout_anchor= \"@id/app_bar\" app:layout_anchorGravity= \"bottom|end\" />","title":"Bottom sheets"},{"location":"components/bottom-sheets/#bottom-sheets","text":"From google material design documentation . A bottom sheet is a sheet of material that slides up from the bottom edge of the screen. Bottom sheets are displayed only as a result of a user-initiated action, and can be swiped up to reveal additional content. A bottom sheet can be a temporary modal surface or a persistent structural element of an app.","title":"Bottom Sheets"},{"location":"components/bottom-sheets/#how-to-add","text":"I. In your build.gradle add latest appcompat and design libraries. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version compile 'com.android.support:design:X.X.X' // where X.X.X version } II. Set the app:layout_behavior attribute with the value @string/bottom_sheet_behavior which will allow your view or viewgroup appear as a bottom sheet. <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"300dp\" android:orientation= \"vertical\" android:padding= \"16dp\" app:layout_behavior= \"@string/bottom_sheet_behavior\" > <TextView android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Dandelion Chocolate\" android:textAppearance= \"@style/TextAppearance.AppCompat.Display1\" android:textColor= \"@android:color/black\" /> </LinearLayout> Note You can use the behavior_peekHeight attribute to set the default height of the bottom sheet. III. Add your view which implements the bottom sheet behavior as a direct child of a CoordinatorLayout . <?xml version=\"1.0\" encoding=\"utf-8\"?> <android.support.design.widget.CoordinatorLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:tools= \"http://schemas.android.com/tools\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" tools:context= \".MainActivity\" > <android.support.design.widget.AppBarLayout android:id= \"@+id/appbarLayout\" android:layout_width= \"match_parent\" android:layout_height= \"?attr/actionBarSize\" android:theme= \"@style/ThemeOverlay.AppCompat.Dark.ActionBar\" > <android.support.v7.widget.Toolbar android:id= \"@+id/appbar\" android:layout_height= \"?attr/actionBarSize\" android:layout_width= \"match_parent\" android:minHeight= \"?attr/actionBarSize\" android:background= \"?attr/colorPrimary\" app:elevation= \"4dp\" android:theme= \"@style/ThemeOverlay.AppCompat.Dark.ActionBar\" app:popupTheme= \"@style/ThemeOverlay.AppCompat.Light\" > </android.support.v7.widget.Toolbar> </android.support.design.widget.AppBarLayout> <!-- Your content --> <include layout= \"@layout/content_main\" /> <!-- Bottom Sheet --> <include layout= \"@layout/bottom_sheets_main\" /> </android.support.design.widget.CoordinatorLayout> Note You can wrap your views and viewgroups under <include> tags in order to keep clean your layouts. IV. Get a reference of BottomSheetBehavior with a reference of the view which has the bottom behavior set. Use the from method of BottomSheetBehavior . LinearLayout bottomSheetViewgroup = ( LinearLayout ) findViewById ( R . id . bottom_sheet ); BottomSheetBehavior bottomSheetBehavior = BottomSheetBehavior . from ( bottomSheetViewgroup ); VI. To expand your bottom sheet use setState method with BottomSheetBehavior.STATE_EXPANDED parameter. bottomSheetBehavior . setState ( BottomSheetBehavior . STATE_EXPANDED ); You can handle these states via the setState method: STATE_EXPANDED : To completely expand the bottom sheet. STATE_HIDE : To completely hide the bottom sheet. STATE_COLLAPSED : To set the bottom sheet height with the value set on the peekHeight attribute.","title":"How to add?"},{"location":"components/bottom-sheets/#modal-bottom-sheets","text":"From google material design documentation . Modal bottom sheets are alternatives to menus or simple dialogs. They can also present deep-linked content from other apps. They are primarily for mobile. I. Create a class extending the BottomSheetDialogFragment inflated with a layout which will be used as the content of your modal bottom sheet. public class ModalBottomSheet extends BottomSheetDialogFragment { static BottomSheetDialogFragment newInstance () { return new BottomSheetDialogFragment (); } @Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View v = inflater . inflate ( R . layout . bottom_sheet_modal , container , false ); return v ; } } II. Create an instance of your modal bottom sheet and show it with the show method with a SupportFragmentManager and a String as parameters. ModalBottomSheet modalBottomSheet = new ModalBottomSheet (); modalBottomSheet . show ( getSupportFragmentManager (), \"bottom sheet\" );","title":"Modal bottom sheets"},{"location":"components/bottom-sheets/#how-to-anchor-views","text":"I. Add the view that will be anchored to the bottom sheet as a direct child of the CoordinatorLayout <android.support.design.widget.FloatingActionButton android:id= \"@+id/fab\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_margin= \"@dimen/fab_margin\" android:src= \"@android:drawable/ic_dialog_email\" /> II. Reference the id of the view wich has set the BottomSheetBehavior with the layout_anchor attribute. <android.support.design.widget.FloatingActionButton android:id= \"@+id/fab\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_margin= \"@dimen/fab_margin\" android:src= \"@android:drawable/ic_dialog_email\" app:layout_anchor= \"@id/app_bar\" /> III. Configure the layout_anchorGravity attribute with the desired gravity. <android.support.design.widget.FloatingActionButton android:id= \"@+id/fab\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_margin= \"@dimen/fab_margin\" android:src= \"@android:drawable/ic_dialog_email\" app:layout_anchor= \"@id/app_bar\" app:layout_anchorGravity= \"bottom|end\" />","title":"How to anchor views?"},{"location":"components/buttons/","text":"Buttons \u00b6 Raised Button \u00b6 From google material design documentation . A typically rectangular material button that lifts and displays ink reactions on press. How to add? \u00b6 I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare your Button inside any layout.xml file <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Button\" /> How to style? \u00b6 I. Declare custom style in your styles.xml file. <style name= \"MyButton\" parent= \"Theme.AppCompat.Light\" > <item name= \"colorControlHighlight\" > @color/indigo </item> <item name= \"colorButtonNormal\" > @color/pink </item> </style> II. Apply this style to your Button via android:theme attribute. <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Button\" android:theme= \"@style/MyButton\" /> Compatibility issues \u00b6 Note To change Button color of pressed state you can use colorControlHighlight theme attribute, however it will only affect Lollipop version. Note Android elevation attribute is only available on Lollipop devices therefore you will not see shadow around Button on pre Lollipop devices. Flat Button \u00b6 From google material design documentation . A button made of ink that displays ink reactions on press but does not lift. How to add? \u00b6 I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare your Button inside any layout.xml file with Borderless style. <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Button\" style= \"@style/Widget.AppCompat.Button.Borderless\" /> How to style? \u00b6 I. Declare custom style in your styles.xml file. <style name= \"MyButton\" parent= \"Theme.AppCompat.Light\" > <item name= \"colorControlHighlight\" > @color/pink </item> </style> III. Apply this style to your Button via android:theme attribute. <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Button\" android:theme= \"@style/MyButton\" style= \"@style/Widget.AppCompat.Button.Borderless\" />","title":"Buttons"},{"location":"components/buttons/#buttons","text":"","title":"Buttons"},{"location":"components/buttons/#raised-button","text":"From google material design documentation . A typically rectangular material button that lifts and displays ink reactions on press.","title":"Raised Button"},{"location":"components/buttons/#how-to-add","text":"I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare your Button inside any layout.xml file <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Button\" />","title":"How to add?"},{"location":"components/buttons/#how-to-style","text":"I. Declare custom style in your styles.xml file. <style name= \"MyButton\" parent= \"Theme.AppCompat.Light\" > <item name= \"colorControlHighlight\" > @color/indigo </item> <item name= \"colorButtonNormal\" > @color/pink </item> </style> II. Apply this style to your Button via android:theme attribute. <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Button\" android:theme= \"@style/MyButton\" />","title":"How to style?"},{"location":"components/buttons/#compatibility-issues","text":"Note To change Button color of pressed state you can use colorControlHighlight theme attribute, however it will only affect Lollipop version. Note Android elevation attribute is only available on Lollipop devices therefore you will not see shadow around Button on pre Lollipop devices.","title":"Compatibility issues"},{"location":"components/buttons/#flat-button","text":"From google material design documentation . A button made of ink that displays ink reactions on press but does not lift.","title":"Flat Button"},{"location":"components/buttons/#how-to-add_1","text":"I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare your Button inside any layout.xml file with Borderless style. <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Button\" style= \"@style/Widget.AppCompat.Button.Borderless\" />","title":"How to add?"},{"location":"components/buttons/#how-to-style_1","text":"I. Declare custom style in your styles.xml file. <style name= \"MyButton\" parent= \"Theme.AppCompat.Light\" > <item name= \"colorControlHighlight\" > @color/pink </item> </style> III. Apply this style to your Button via android:theme attribute. <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Button\" android:theme= \"@style/MyButton\" style= \"@style/Widget.AppCompat.Button.Borderless\" />","title":"How to style?"},{"location":"components/cards/","text":"Cards \u00b6 From Google material design documentation A card is a piece of paper with unique related data that serves as an entry point to more detailed information. For example, a card could contain a photo, text, and a link about a single subject. How to add? \u00b6 I. In your build.gradle include the cardview library: dependencies { compile 'com.android.support:cardview-v7:X.X.X' // where X.X.X version } II. Declare your card inside any layout.xml file and insert views inside it. <android.support.v7.widget.CardView android:layout_width= \"match_parent\" android:layout_height= \"200dp\" > <TextView android:text= \"Hello World!\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> </android.support.v7.widget.CardView> Note Use android:clipToPadding=\"false\" on the card parent allows you to prevent possible clips in the outer shadows of the card. How to style? \u00b6 I. Declare your custom style in your styles.xml file. <style name= \"MyCardViewStyle\" parent= \"Theme.AppCompat.Light\" > <item name= \"cardCornerRadius\" > 2dp </item> <item name= \"cardElevation\" > 2dp </item> <item name= \"contentPaddingBottom\" > 24dp </item> <item name= \"contentPaddingTop\" > 24dp </item> <item name= \"contentPaddingLeft\" > 16dp </item> <item name= \"contentPaddingRight\" > 16dp </item> <item name= \"cardBackgroundColor\" > @color/indigo </item> </style> II. Apply this style to your card via style attribute. <android.support.v7.widget.CardView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" style= \"@style/MyCardViewStyle\" >","title":"Cards"},{"location":"components/cards/#cards","text":"From Google material design documentation A card is a piece of paper with unique related data that serves as an entry point to more detailed information. For example, a card could contain a photo, text, and a link about a single subject.","title":"Cards"},{"location":"components/cards/#how-to-add","text":"I. In your build.gradle include the cardview library: dependencies { compile 'com.android.support:cardview-v7:X.X.X' // where X.X.X version } II. Declare your card inside any layout.xml file and insert views inside it. <android.support.v7.widget.CardView android:layout_width= \"match_parent\" android:layout_height= \"200dp\" > <TextView android:text= \"Hello World!\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> </android.support.v7.widget.CardView> Note Use android:clipToPadding=\"false\" on the card parent allows you to prevent possible clips in the outer shadows of the card.","title":"How to add?"},{"location":"components/cards/#how-to-style","text":"I. Declare your custom style in your styles.xml file. <style name= \"MyCardViewStyle\" parent= \"Theme.AppCompat.Light\" > <item name= \"cardCornerRadius\" > 2dp </item> <item name= \"cardElevation\" > 2dp </item> <item name= \"contentPaddingBottom\" > 24dp </item> <item name= \"contentPaddingTop\" > 24dp </item> <item name= \"contentPaddingLeft\" > 16dp </item> <item name= \"contentPaddingRight\" > 16dp </item> <item name= \"cardBackgroundColor\" > @color/indigo </item> </style> II. Apply this style to your card via style attribute. <android.support.v7.widget.CardView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" style= \"@style/MyCardViewStyle\" >","title":"How to style?"},{"location":"components/dialogs/","text":"Dialogs \u00b6 Alerts \u00b6 From Google material design documentation Alerts are urgent interruptions, requiring acknowledgement, that inform the user about a situation. How to add? \u00b6 I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. To create your dialog use android.support.v7.app.AlertDialog.Builder . private void showLocationDialog () { AlertDialog . Builder builder = new AlertDialog . Builder ( MainActivity . this ); builder . setTitle ( getString ( R . string . dialog_title )); builder . setMessage ( getString ( R . string . dialog_message )); String positiveText = getString ( android . R . string . ok ); builder . setPositiveButton ( positiveText , new DialogInterface . OnClickListener () { @Override public void onClick ( DialogInterface dialog , int which ) { // positive button logic } }); String negativeText = getString ( android . R . string . cancel ); builder . setNegativeButton ( negativeText , new DialogInterface . OnClickListener () { @Override public void onClick ( DialogInterface dialog , int which ) { // negative button logic } }); AlertDialog dialog = builder . create (); // display dialog dialog . show (); } How to style? \u00b6 I. Declare custom drawable.xml for dialog background. <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- From: support/v7/appcompat/res/drawable/abc_dialog_material_background_light.xml --> <inset xmlns:android= \"http://schemas.android.com/apk/res/android\" android:insetLeft= \"16dp\" android:insetTop= \"16dp\" android:insetRight= \"16dp\" android:insetBottom= \"16dp\" > <shape android:shape= \"rectangle\" > <corners android:radius= \"2dp\" /> <solid android:color= \"@color/indigo\" /> </shape> </inset> II. Declare custom styles in your styles.xml file. <style name= \"MyDialogTheme\" parent= \"Theme.AppCompat.Light.Dialog.Alert\" > <!--buttons color--> <item name= \"colorAccent\" > @color/pink </item> <!--title and message color--> <item name= \"android:textColorPrimary\" > @android:color/white </item> <!--dialog background--> <item name= \"android:windowBackground\" > @drawable/background_dialog </item> </style> III. Create your dialog and use style as parameter in AlertDialog.Builder . AlertDialog . Builder builder = new AlertDialog . Builder ( this , R . style . MyDialogTheme ); ... AlertDialog dialog = builder . create (); // display dialog dialog . show (); Note You can also style dialog in your activity theme via alertDialogTheme attribute. Confirmation Dialogs \u00b6 From Google material design documentation Confirmation dialogs require users to explicitly confirm their choice before an option is committed. For example, users can listen to multiple ringtones but only make a final selection upon touching \u201cOK.\u201d Tapping \u201cCancel\u201d in a confirmation dialog, or pressing \u201cBack,\u201d cancels the action, discards any changes, and closes the dialog. How to add? \u00b6 I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. To create dialog use android.support.v7.app.AlertDialog.Builder . Single choice dialog \u00b6 To create dialog with single choice list use method setSingleChoiceItems in your builder object. public void showDialog () { AlertDialog . Builder builder = new AlertDialog . Builder ( MainActivity . this ); builder . setTitle ( R . string . dialog_title ); //list of items String [] items = getResources (). getStringArray ( R . array . ringtone_list ); builder . setSingleChoiceItems ( items , 0 , new DialogInterface . OnClickListener () { @Override public void onClick ( DialogInterface dialog , int which ) { // item selected logic } }); String positiveText = getString ( android . R . string . ok ); builder . setPositiveButton ( positiveText , new DialogInterface . OnClickListener () { @Override public void onClick ( DialogInterface dialog , int which ) { // positive button logic } }); String negativeText = getString ( android . R . string . cancel ); builder . setNegativeButton ( negativeText , new DialogInterface . OnClickListener () { @Override public void onClick ( DialogInterface dialog , int which ) { // negative button logic } }); AlertDialog dialog = builder . create (); // display dialog dialog . show (); } Multiple choice dialog \u00b6 To create dialog with multiple choice list use method setMultiChoiceItems in your builder object. ... builder . setMultiChoiceItems ( items , selectedItemsArray , new DialogInterface . OnMultiChoiceClickListener () { @Override public void onClick ( DialogInterface dialog , int which , boolean isChecked ) { //item checked logic } }); ... How to style \u00b6 I. Declare custom drawable.xml for dialog background. <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- From: support/v7/appcompat/res/drawable/abc_dialog_material_background_light.xml --> <inset xmlns:android= \"http://schemas.android.com/apk/res/android\" android:insetLeft= \"16dp\" android:insetTop= \"16dp\" android:insetRight= \"16dp\" android:insetBottom= \"16dp\" > <shape android:shape= \"rectangle\" > <corners android:radius= \"2dp\" /> <solid android:color= \"@color/indigo\" /> </shape> </inset> II. Declare custom styles in your styles.xml file. < style name = \"MyDialogTheme\" parent = \"Theme.AppCompat.Light.Dialog.Alert\" > <!-- item RadioButton or CheckBox color --> < item name = \"colorControlNormal\" > @android : color / white </ item > < item name = \"colorControlActivated\" > @color / pink </ item > <!-- item text color --> < item name = \"textColorAlertDialogListItem\" > @android : color / white </ item > <!-- buttons color --> < item name = \"colorAccent\" > @color / pink </ item > <!-- title and message color --> < item name = \"android:textColorPrimary\" > @android : color / white </ item > <!-- dialog background --> < item name = \"android:windowBackground\" > @drawable / background_dialog </ item > </ style > III. Create your dialog and use style as parameter in AlertDialog.Builder . AlertDialog . Builder builder = new AlertDialog . Builder ( this , R . style . MyDialogTheme ); ... AlertDialog dialog = builder . create (); // display dialog dialog . show ();","title":"Dialogs"},{"location":"components/dialogs/#dialogs","text":"","title":"Dialogs"},{"location":"components/dialogs/#alerts","text":"From Google material design documentation Alerts are urgent interruptions, requiring acknowledgement, that inform the user about a situation.","title":"Alerts"},{"location":"components/dialogs/#how-to-add","text":"I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. To create your dialog use android.support.v7.app.AlertDialog.Builder . private void showLocationDialog () { AlertDialog . Builder builder = new AlertDialog . Builder ( MainActivity . this ); builder . setTitle ( getString ( R . string . dialog_title )); builder . setMessage ( getString ( R . string . dialog_message )); String positiveText = getString ( android . R . string . ok ); builder . setPositiveButton ( positiveText , new DialogInterface . OnClickListener () { @Override public void onClick ( DialogInterface dialog , int which ) { // positive button logic } }); String negativeText = getString ( android . R . string . cancel ); builder . setNegativeButton ( negativeText , new DialogInterface . OnClickListener () { @Override public void onClick ( DialogInterface dialog , int which ) { // negative button logic } }); AlertDialog dialog = builder . create (); // display dialog dialog . show (); }","title":"How to add?"},{"location":"components/dialogs/#how-to-style","text":"I. Declare custom drawable.xml for dialog background. <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- From: support/v7/appcompat/res/drawable/abc_dialog_material_background_light.xml --> <inset xmlns:android= \"http://schemas.android.com/apk/res/android\" android:insetLeft= \"16dp\" android:insetTop= \"16dp\" android:insetRight= \"16dp\" android:insetBottom= \"16dp\" > <shape android:shape= \"rectangle\" > <corners android:radius= \"2dp\" /> <solid android:color= \"@color/indigo\" /> </shape> </inset> II. Declare custom styles in your styles.xml file. <style name= \"MyDialogTheme\" parent= \"Theme.AppCompat.Light.Dialog.Alert\" > <!--buttons color--> <item name= \"colorAccent\" > @color/pink </item> <!--title and message color--> <item name= \"android:textColorPrimary\" > @android:color/white </item> <!--dialog background--> <item name= \"android:windowBackground\" > @drawable/background_dialog </item> </style> III. Create your dialog and use style as parameter in AlertDialog.Builder . AlertDialog . Builder builder = new AlertDialog . Builder ( this , R . style . MyDialogTheme ); ... AlertDialog dialog = builder . create (); // display dialog dialog . show (); Note You can also style dialog in your activity theme via alertDialogTheme attribute.","title":"How to style?"},{"location":"components/dialogs/#confirmation-dialogs","text":"From Google material design documentation Confirmation dialogs require users to explicitly confirm their choice before an option is committed. For example, users can listen to multiple ringtones but only make a final selection upon touching \u201cOK.\u201d Tapping \u201cCancel\u201d in a confirmation dialog, or pressing \u201cBack,\u201d cancels the action, discards any changes, and closes the dialog.","title":"Confirmation Dialogs"},{"location":"components/dialogs/#how-to-add_1","text":"I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. To create dialog use android.support.v7.app.AlertDialog.Builder .","title":"How to add?"},{"location":"components/dialogs/#single-choice-dialog","text":"To create dialog with single choice list use method setSingleChoiceItems in your builder object. public void showDialog () { AlertDialog . Builder builder = new AlertDialog . Builder ( MainActivity . this ); builder . setTitle ( R . string . dialog_title ); //list of items String [] items = getResources (). getStringArray ( R . array . ringtone_list ); builder . setSingleChoiceItems ( items , 0 , new DialogInterface . OnClickListener () { @Override public void onClick ( DialogInterface dialog , int which ) { // item selected logic } }); String positiveText = getString ( android . R . string . ok ); builder . setPositiveButton ( positiveText , new DialogInterface . OnClickListener () { @Override public void onClick ( DialogInterface dialog , int which ) { // positive button logic } }); String negativeText = getString ( android . R . string . cancel ); builder . setNegativeButton ( negativeText , new DialogInterface . OnClickListener () { @Override public void onClick ( DialogInterface dialog , int which ) { // negative button logic } }); AlertDialog dialog = builder . create (); // display dialog dialog . show (); }","title":"Single choice dialog"},{"location":"components/dialogs/#multiple-choice-dialog","text":"To create dialog with multiple choice list use method setMultiChoiceItems in your builder object. ... builder . setMultiChoiceItems ( items , selectedItemsArray , new DialogInterface . OnMultiChoiceClickListener () { @Override public void onClick ( DialogInterface dialog , int which , boolean isChecked ) { //item checked logic } }); ...","title":"Multiple choice dialog"},{"location":"components/dialogs/#how-to-style_1","text":"I. Declare custom drawable.xml for dialog background. <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- From: support/v7/appcompat/res/drawable/abc_dialog_material_background_light.xml --> <inset xmlns:android= \"http://schemas.android.com/apk/res/android\" android:insetLeft= \"16dp\" android:insetTop= \"16dp\" android:insetRight= \"16dp\" android:insetBottom= \"16dp\" > <shape android:shape= \"rectangle\" > <corners android:radius= \"2dp\" /> <solid android:color= \"@color/indigo\" /> </shape> </inset> II. Declare custom styles in your styles.xml file. < style name = \"MyDialogTheme\" parent = \"Theme.AppCompat.Light.Dialog.Alert\" > <!-- item RadioButton or CheckBox color --> < item name = \"colorControlNormal\" > @android : color / white </ item > < item name = \"colorControlActivated\" > @color / pink </ item > <!-- item text color --> < item name = \"textColorAlertDialogListItem\" > @android : color / white </ item > <!-- buttons color --> < item name = \"colorAccent\" > @color / pink </ item > <!-- title and message color --> < item name = \"android:textColorPrimary\" > @android : color / white </ item > <!-- dialog background --> < item name = \"android:windowBackground\" > @drawable / background_dialog </ item > </ style > III. Create your dialog and use style as parameter in AlertDialog.Builder . AlertDialog . Builder builder = new AlertDialog . Builder ( this , R . style . MyDialogTheme ); ... AlertDialog dialog = builder . create (); // display dialog dialog . show ();","title":"How to style"},{"location":"components/fab/","text":"Floating Action Button \u00b6 From Google material design documentation . A floating action button represents the primary action in an application. A floating action button is used for a promoted action. Shaped like a circled icon floating above the UI, it changes color upon focus and lifts upon selection. When pressed, it may contain more related actions. How to add? \u00b6 I. In your build.gradle , add latest appcompat and design libraries. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version compile 'com.android.support:design:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare your FloatingActionButton inside any layout.xml file. <android.support.design.widget.FloatingActionButton android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:src= \"@drawable/ic_call\" /> How to style \u00b6 Background color \u00b6 I. Declare custom style in your values/styles.xml file. <style name= \"MyFloatingButton\" parent= \"Theme.AppCompat.Light\" > <item name= \"colorAccent\" > @color/pink </item> </style> II. Apply this style to your FloatingActionButton via android:theme attribute. <android.support.design.widget.FloatingActionButton android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:src= \"@drawable/ic_call\" android:theme= \"@style/MyFloatingButton\" /> Ripple color \u00b6 To change the color for the ripple effects when FloatingActionButton is pressed use app:rippleColor attribute. <android.support.design.widget.FloatingActionButton android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:src= \"@drawable/ic_call\" app:rippleColor= \"@color/indigo\" /> Icon \u00b6 To change FloatingActionButton icon use android:src attribute. <android.support.design.widget.FloatingActionButton android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:src= \"@drawable/ic_favorite\" /> Size \u00b6 Floating action buttons come in two sizes: - Default size: For most use cases - Mini size: Only used to create visual continuity with other screen elements To change FloatingActionButton size use app:fabSize attribute with one of pre-defined constant values: mini or normal . <android.support.design.widget.FloatingActionButton android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:src= \"@drawable/ic_mini\" app:fabSize= \"mini\" />","title":"Buttons FAB"},{"location":"components/fab/#floating-action-button","text":"From Google material design documentation . A floating action button represents the primary action in an application. A floating action button is used for a promoted action. Shaped like a circled icon floating above the UI, it changes color upon focus and lifts upon selection. When pressed, it may contain more related actions.","title":"Floating Action Button"},{"location":"components/fab/#how-to-add","text":"I. In your build.gradle , add latest appcompat and design libraries. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version compile 'com.android.support:design:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare your FloatingActionButton inside any layout.xml file. <android.support.design.widget.FloatingActionButton android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:src= \"@drawable/ic_call\" />","title":"How to add?"},{"location":"components/fab/#how-to-style","text":"","title":"How to style"},{"location":"components/fab/#background-color","text":"I. Declare custom style in your values/styles.xml file. <style name= \"MyFloatingButton\" parent= \"Theme.AppCompat.Light\" > <item name= \"colorAccent\" > @color/pink </item> </style> II. Apply this style to your FloatingActionButton via android:theme attribute. <android.support.design.widget.FloatingActionButton android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:src= \"@drawable/ic_call\" android:theme= \"@style/MyFloatingButton\" />","title":"Background color"},{"location":"components/fab/#ripple-color","text":"To change the color for the ripple effects when FloatingActionButton is pressed use app:rippleColor attribute. <android.support.design.widget.FloatingActionButton android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:src= \"@drawable/ic_call\" app:rippleColor= \"@color/indigo\" />","title":"Ripple color"},{"location":"components/fab/#icon","text":"To change FloatingActionButton icon use android:src attribute. <android.support.design.widget.FloatingActionButton android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:src= \"@drawable/ic_favorite\" />","title":"Icon"},{"location":"components/fab/#size","text":"Floating action buttons come in two sizes: - Default size: For most use cases - Mini size: Only used to create visual continuity with other screen elements To change FloatingActionButton size use app:fabSize attribute with one of pre-defined constant values: mini or normal . <android.support.design.widget.FloatingActionButton android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:src= \"@drawable/ic_mini\" app:fabSize= \"mini\" />","title":"Size"},{"location":"components/menus/","text":"Menus \u00b6 From the google material design documentation Menus allow users to take an action by selecting from a list of choices revealed upon opening a temporary, new sheet of material. How to add? \u00b6 I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MyActivity extends AppCompatActivity { ... } III. Create a menu file inside the res/menu folder with some items on it. <menu xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:tools= \"http://schemas.android.com/tools\" tools:context= \"com.example.saulmm.myapplication.MainActivity\" > <item android:id= \"@+id/action_refresh\" android:title= \"@string/action_refresh\" app:showAsAction= \"never\" /> <item android:id= \"@+id/action_feedback\" android:title= \"@string/action_feedback\" app:showAsAction= \"never\" /> <item android:id= \"@+id/action_settings\" android:title= \"@string/action_settings\" app:showAsAction= \"never\" /> <item android:id= \"@+id/action_leave\" android:title= \"@string/action_leave\" app:showAsAction= \"never\" /> </menu> IV. Override activity onCreateOptionsMenu method and inflate menu resource. @Override public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater (). inflate ( R . menu . menu_main , menu ); return true ; } How to style? \u00b6 I. Declare a custom style extending the ThemeOverlay.AppCompat.Dark theme in your style.xml file. <style name= \"MyPopupTheme\" parent= \"ThemeOverlay.AppCompat.Dark\" > <item name= \"android:colorControlActivated\" > @color/red </item> <item name= \"android:colorControlHighlight\" > @color/red </item> <item name= \"android:colorControlNormal\" > @color/yellow </item> <item name= \"android:textColorPrimary\" > @color/yellow </item> </style> II. Apply this style to your Toolbar via app:popupTheme . <android.support.v7.widget.Toolbar android:id= \"@+id/toolbar\" android:layout_width= \"match_parent\" android:layout_height= \"?attr/actionBarSize\" app:popupTheme= \"@style/MyPopupTheme\" />","title":"Menus"},{"location":"components/menus/#menus","text":"From the google material design documentation Menus allow users to take an action by selecting from a list of choices revealed upon opening a temporary, new sheet of material.","title":"Menus"},{"location":"components/menus/#how-to-add","text":"I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MyActivity extends AppCompatActivity { ... } III. Create a menu file inside the res/menu folder with some items on it. <menu xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:tools= \"http://schemas.android.com/tools\" tools:context= \"com.example.saulmm.myapplication.MainActivity\" > <item android:id= \"@+id/action_refresh\" android:title= \"@string/action_refresh\" app:showAsAction= \"never\" /> <item android:id= \"@+id/action_feedback\" android:title= \"@string/action_feedback\" app:showAsAction= \"never\" /> <item android:id= \"@+id/action_settings\" android:title= \"@string/action_settings\" app:showAsAction= \"never\" /> <item android:id= \"@+id/action_leave\" android:title= \"@string/action_leave\" app:showAsAction= \"never\" /> </menu> IV. Override activity onCreateOptionsMenu method and inflate menu resource. @Override public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater (). inflate ( R . menu . menu_main , menu ); return true ; }","title":"How to add?"},{"location":"components/menus/#how-to-style","text":"I. Declare a custom style extending the ThemeOverlay.AppCompat.Dark theme in your style.xml file. <style name= \"MyPopupTheme\" parent= \"ThemeOverlay.AppCompat.Dark\" > <item name= \"android:colorControlActivated\" > @color/red </item> <item name= \"android:colorControlHighlight\" > @color/red </item> <item name= \"android:colorControlNormal\" > @color/yellow </item> <item name= \"android:textColorPrimary\" > @color/yellow </item> </style> II. Apply this style to your Toolbar via app:popupTheme . <android.support.v7.widget.Toolbar android:id= \"@+id/toolbar\" android:layout_width= \"match_parent\" android:layout_height= \"?attr/actionBarSize\" app:popupTheme= \"@style/MyPopupTheme\" />","title":"How to style?"},{"location":"components/pickers/","text":"Pickers \u00b6 Date Picker \u00b6 From the Google Material Design documentation A dialog picker is used to select a single date on mobile_. The selected day is indicated by a filled circle. The current day is indicated by a different color and type weight. How to add? \u00b6 I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity and implement the DatePickerDialog.OnDateSetListener interface. public class MainActivity extends AppCompatActivity implements DatePickerDialog . OnDateSetListener { ... } III. Create your DatePickerDialog setting a context, the implementation of the listener and the start year, month and day of the date picker. DatePickerDialog datePickerDialog = new DatePickerDialog ( context , listener , startYear , starthMonth , startDay ); IV. Show your dialog with the method show of DatePickerDialog datePickerDialog . show (); How to style? \u00b6 I. Declare custom drawable.xml for the dialog background. <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- From: support/v7/appcompat/res/drawable/abc_dialog_material_background_light.xml --> <inset xmlns:android= \"http://schemas.android.com/apk/res/android\" android:insetLeft= \"16dp\" android:insetTop= \"16dp\" android:insetRight= \"16dp\" android:insetBottom= \"16dp\" > <shape android:shape= \"rectangle\" > <corners android:radius= \"2dp\" /> <solid android:color= \"@color/indigo\" /> </shape> </inset> II. Declare custom styles in your styles.xml file. <style name= \"MyDialogTheme\" parent= \"Theme.AppCompat.Light.Dialog.Alert\" > <item name= \"colorControlNormal\" > @android:color/white </item> <item name= \"colorControlActivated\" > @color/pink </item> <item name= \"textColorAlertDialogListItem\" > @android:color/white </item> <item name= \"colorAccent\" > @color/pink </item> <item name= \"android:textColorPrimary\" > @android:color/white </item> <item name= \"android:windowBackground\" > @drawable/background_dialog </item> </style> III. Set your custom style as a parameter of the DatePickerDialog . DatePickerDialog datePickerDialog = new DatePickerDialog ( this , R . style . MyDialogTheme , listener , 2016 , 21 , 3 ); IV. Show your DatePickerDialog with the show method. datePickerDialog . show (); Time Picker \u00b6 From the Google Material Design documentation A time picker adjusts to a user\u2019s preferred time setting, i.e. the 12-hour or 24-hour format. A dialog picker is used to select a single time (hours:minutes) on mobile. How to add? \u00b6 I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity and implement the TimePickerDialog.OnTimeSetListener interface. public class MainActivity extends AppCompatActivity implements TimePickerDialog . OnTimeSetListener { ... } III. Create your TimePickerDialog setting a context, the implementation of the listener, the start hour of the day, minute and a boolean indicating if the dialog should show a 24h. format or not. TimePickerDialog timePickerDialog = new TimePickerDialog ( context , listener , startHour , startMinute , is24HourFormat ); IV. Show your dialog with the method show of TimePickerDialog . timePickerDialog . show (); How to style? \u00b6 I. Declare custom drawable.xml for the dialog background. <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- From: support/v7/appcompat/res/drawable/abc_dialog_material_background_light.xml --> <inset xmlns:android= \"http://schemas.android.com/apk/res/android\" android:insetLeft= \"16dp\" android:insetTop= \"16dp\" android:insetRight= \"16dp\" android:insetBottom= \"16dp\" > <shape android:shape= \"rectangle\" > <corners android:radius= \"2dp\" /> <solid android:color= \"@color/indigo\" /> </shape> </inset> II. Declare a custom styles in your styles.xml file. <style name= \"MyDialogTheme\" parent= \"Theme.AppCompat.Light.Dialog.Alert\" > <item name= \"colorControlNormal\" > @color/indigo </item> <item name= \"colorControlActivated\" > @color/pink </item> <item name= \"textColorAlertDialogListItem\" > @color/indigo </item> <item name= \"colorAccent\" > @color/pink </item> <item name= \"android:textColorPrimary\" > @color/indigo </item> <item name= \"android:windowBackground\" > @drawable/background_dialog </item> </style> III. Set your custom style as a parameter of the DatePickerDialog . TimePickerDialog timePickerDialog = new TimePickerDialog ( context , R . style . MyDialogTheme , listener , startHour , startMinute , is24HourFormat ); IV. Show your TimePickerDialog with the show method. timePickerDialog . show (); Dark theme \u00b6 I. Use R.style.Theme_AppCompat_Dialog_Alert theme for the style parameter in the TimePickerDialog constructor. TimePickerDialog dialog = new TimePickerDialog ( context , R . style . Theme_AppCompat_Dialog_Alert , listener , startingHour , startingMinute , is24HourFormat ); Note You can use your custom style setting its parent with the Theme.AppCompat.Light.Dialog.Alert value Color Picker \u00b6 From Google material design documentation . Pickers provide a simple way to select a single value from a pre-determined set. How to add? \u00b6 I. Clone the color picker project from the Google open source repository . git clone https://android.googlesource.com/platform/frameworks/opt/colorpicker II. Import a new module in android studio with the New/Import module menu, choosing the path where the project was cloned. III. Compile the new module as a dependency of your android project dependencies { compile project(':colorpicker') } IV. Declare some colors in your resources file colors.xml <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <color name= \"red\" > #F6402C </color> <color name= \"pink\" > #EB1460 </color> <color name= \"purple\" > #9C1AB1 </color> <color name= \"deep_purple\" > #6633B9 </color> <color name= \"indigo\" > #3D4DB7 </color> <color name= \"blue\" > #1093F5 </color> <color name= \"light_blue\" > #00A6F6 </color> <color name= \"cyan\" > #00BBD5 </color> <color name= \"teal\" > #009687 </color> <color name= \"green\" > #46AF4A </color> <color name= \"light_green\" > #88C440 </color> <color name= \"lime\" > #CCDD1E </color> <color name= \"yellow\" > #FFEC16 </color> <color name= \"amber\" > #FFC100 </color> <color name= \"orange\" > #FF9800 </color> <color name= \"deep_orange\" > #FF5505 </color> <color name= \"brown\" > #7A5547 </color> <color name= \"grey\" > #9D9D9D </color> <color name= \"blue_grey\" > #5E7C8B </color> </resources> V. Init your ColorPickerDialog with a title, an array of colors, the default selected color, the number of columns and the size of the shown colors. ColorPickerDialog colorPickerDialog = new ColorPickerDialog (); colorPickerDialog . initialize ( R . string . title , colors , selectedColor , numColumns , colors . length ); VI. Since ColorPickerDialog extends from a DialogFragment show it with the show method setting it with a FragmentManager and a tag. colorPickerDialog . show ( getFragmentManager (), tag ); How to style? \u00b6 I. Create a ColorPickerPalette in a layout file. <com.android.colorpicker.ColorPickerPalette xmlns:android= \"http://schemas.android.com/apk/res/android\" android:id= \"@+id/palette\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:layout_gravity= \"center\" android:gravity= \"center\" android:padding= \"16dp\" /> Note The ColorPickerPalette extends from the TableLayout class, you can use the TableLayout view group parameters to style it. II. Declare a dark style for the dialog which will contain the ColorPickerPalette . <style name= \"MyDialogTheme\" parent= \"Theme.AppCompat.Dialog.Alert\" > <item name= \"colorAccent\" > @color/teal_light </item> <item name= \"android:textColorPrimary\" > @android:color/white </item> </style> III. Inflate your ColorPickerPalette in a view object. LayoutInflater layoutInflater = LayoutInflater . from ( context ); ColorPickerPalette colorPickerPalette = ( ColorPickerPalette ) layoutInflater . inflate ( R . layout . custom_picker , null ); IV. Configure the ColorPickerPalette with a number of colors and a listener. colorPickerPalette . init ( colors . length , columns , mOnColorSelectedListener ); V. Call the colorPickerPalette method of ColorPickerPalette with an array of your colors and the selected default color. colorPickerPalette . drawPalette ( colors , selectedColor ); VI. Create your dialog via AlertDialog.Builder with your dark theme and your view as the content. AlertDialog alert = new AlertDialog . Builder ( this , R . style . MyDialogTheme ) . setTitle ( R . string . title_color_picker ) . setPositiveButton ( android . R . string . ok , mOnClickListener ) . setNegativeButton ( android . R . string . no , mOnClickListener ) . setView ( colorPickerPalette ) . create (); VII. Show your dialog alert . show ();","title":"Pickers"},{"location":"components/pickers/#pickers","text":"","title":"Pickers"},{"location":"components/pickers/#date-picker","text":"From the Google Material Design documentation A dialog picker is used to select a single date on mobile_. The selected day is indicated by a filled circle. The current day is indicated by a different color and type weight.","title":"Date Picker"},{"location":"components/pickers/#how-to-add","text":"I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity and implement the DatePickerDialog.OnDateSetListener interface. public class MainActivity extends AppCompatActivity implements DatePickerDialog . OnDateSetListener { ... } III. Create your DatePickerDialog setting a context, the implementation of the listener and the start year, month and day of the date picker. DatePickerDialog datePickerDialog = new DatePickerDialog ( context , listener , startYear , starthMonth , startDay ); IV. Show your dialog with the method show of DatePickerDialog datePickerDialog . show ();","title":"How to add?"},{"location":"components/pickers/#how-to-style","text":"I. Declare custom drawable.xml for the dialog background. <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- From: support/v7/appcompat/res/drawable/abc_dialog_material_background_light.xml --> <inset xmlns:android= \"http://schemas.android.com/apk/res/android\" android:insetLeft= \"16dp\" android:insetTop= \"16dp\" android:insetRight= \"16dp\" android:insetBottom= \"16dp\" > <shape android:shape= \"rectangle\" > <corners android:radius= \"2dp\" /> <solid android:color= \"@color/indigo\" /> </shape> </inset> II. Declare custom styles in your styles.xml file. <style name= \"MyDialogTheme\" parent= \"Theme.AppCompat.Light.Dialog.Alert\" > <item name= \"colorControlNormal\" > @android:color/white </item> <item name= \"colorControlActivated\" > @color/pink </item> <item name= \"textColorAlertDialogListItem\" > @android:color/white </item> <item name= \"colorAccent\" > @color/pink </item> <item name= \"android:textColorPrimary\" > @android:color/white </item> <item name= \"android:windowBackground\" > @drawable/background_dialog </item> </style> III. Set your custom style as a parameter of the DatePickerDialog . DatePickerDialog datePickerDialog = new DatePickerDialog ( this , R . style . MyDialogTheme , listener , 2016 , 21 , 3 ); IV. Show your DatePickerDialog with the show method. datePickerDialog . show ();","title":"How to style?"},{"location":"components/pickers/#time-picker","text":"From the Google Material Design documentation A time picker adjusts to a user\u2019s preferred time setting, i.e. the 12-hour or 24-hour format. A dialog picker is used to select a single time (hours:minutes) on mobile.","title":"Time Picker"},{"location":"components/pickers/#how-to-add_1","text":"I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity and implement the TimePickerDialog.OnTimeSetListener interface. public class MainActivity extends AppCompatActivity implements TimePickerDialog . OnTimeSetListener { ... } III. Create your TimePickerDialog setting a context, the implementation of the listener, the start hour of the day, minute and a boolean indicating if the dialog should show a 24h. format or not. TimePickerDialog timePickerDialog = new TimePickerDialog ( context , listener , startHour , startMinute , is24HourFormat ); IV. Show your dialog with the method show of TimePickerDialog . timePickerDialog . show ();","title":"How to add?"},{"location":"components/pickers/#how-to-style_1","text":"I. Declare custom drawable.xml for the dialog background. <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- From: support/v7/appcompat/res/drawable/abc_dialog_material_background_light.xml --> <inset xmlns:android= \"http://schemas.android.com/apk/res/android\" android:insetLeft= \"16dp\" android:insetTop= \"16dp\" android:insetRight= \"16dp\" android:insetBottom= \"16dp\" > <shape android:shape= \"rectangle\" > <corners android:radius= \"2dp\" /> <solid android:color= \"@color/indigo\" /> </shape> </inset> II. Declare a custom styles in your styles.xml file. <style name= \"MyDialogTheme\" parent= \"Theme.AppCompat.Light.Dialog.Alert\" > <item name= \"colorControlNormal\" > @color/indigo </item> <item name= \"colorControlActivated\" > @color/pink </item> <item name= \"textColorAlertDialogListItem\" > @color/indigo </item> <item name= \"colorAccent\" > @color/pink </item> <item name= \"android:textColorPrimary\" > @color/indigo </item> <item name= \"android:windowBackground\" > @drawable/background_dialog </item> </style> III. Set your custom style as a parameter of the DatePickerDialog . TimePickerDialog timePickerDialog = new TimePickerDialog ( context , R . style . MyDialogTheme , listener , startHour , startMinute , is24HourFormat ); IV. Show your TimePickerDialog with the show method. timePickerDialog . show ();","title":"How to style?"},{"location":"components/pickers/#dark-theme","text":"I. Use R.style.Theme_AppCompat_Dialog_Alert theme for the style parameter in the TimePickerDialog constructor. TimePickerDialog dialog = new TimePickerDialog ( context , R . style . Theme_AppCompat_Dialog_Alert , listener , startingHour , startingMinute , is24HourFormat ); Note You can use your custom style setting its parent with the Theme.AppCompat.Light.Dialog.Alert value","title":"Dark theme"},{"location":"components/pickers/#color-picker","text":"From Google material design documentation . Pickers provide a simple way to select a single value from a pre-determined set.","title":"Color Picker"},{"location":"components/pickers/#how-to-add_2","text":"I. Clone the color picker project from the Google open source repository . git clone https://android.googlesource.com/platform/frameworks/opt/colorpicker II. Import a new module in android studio with the New/Import module menu, choosing the path where the project was cloned. III. Compile the new module as a dependency of your android project dependencies { compile project(':colorpicker') } IV. Declare some colors in your resources file colors.xml <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <color name= \"red\" > #F6402C </color> <color name= \"pink\" > #EB1460 </color> <color name= \"purple\" > #9C1AB1 </color> <color name= \"deep_purple\" > #6633B9 </color> <color name= \"indigo\" > #3D4DB7 </color> <color name= \"blue\" > #1093F5 </color> <color name= \"light_blue\" > #00A6F6 </color> <color name= \"cyan\" > #00BBD5 </color> <color name= \"teal\" > #009687 </color> <color name= \"green\" > #46AF4A </color> <color name= \"light_green\" > #88C440 </color> <color name= \"lime\" > #CCDD1E </color> <color name= \"yellow\" > #FFEC16 </color> <color name= \"amber\" > #FFC100 </color> <color name= \"orange\" > #FF9800 </color> <color name= \"deep_orange\" > #FF5505 </color> <color name= \"brown\" > #7A5547 </color> <color name= \"grey\" > #9D9D9D </color> <color name= \"blue_grey\" > #5E7C8B </color> </resources> V. Init your ColorPickerDialog with a title, an array of colors, the default selected color, the number of columns and the size of the shown colors. ColorPickerDialog colorPickerDialog = new ColorPickerDialog (); colorPickerDialog . initialize ( R . string . title , colors , selectedColor , numColumns , colors . length ); VI. Since ColorPickerDialog extends from a DialogFragment show it with the show method setting it with a FragmentManager and a tag. colorPickerDialog . show ( getFragmentManager (), tag );","title":"How to add?"},{"location":"components/pickers/#how-to-style_2","text":"I. Create a ColorPickerPalette in a layout file. <com.android.colorpicker.ColorPickerPalette xmlns:android= \"http://schemas.android.com/apk/res/android\" android:id= \"@+id/palette\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:layout_gravity= \"center\" android:gravity= \"center\" android:padding= \"16dp\" /> Note The ColorPickerPalette extends from the TableLayout class, you can use the TableLayout view group parameters to style it. II. Declare a dark style for the dialog which will contain the ColorPickerPalette . <style name= \"MyDialogTheme\" parent= \"Theme.AppCompat.Dialog.Alert\" > <item name= \"colorAccent\" > @color/teal_light </item> <item name= \"android:textColorPrimary\" > @android:color/white </item> </style> III. Inflate your ColorPickerPalette in a view object. LayoutInflater layoutInflater = LayoutInflater . from ( context ); ColorPickerPalette colorPickerPalette = ( ColorPickerPalette ) layoutInflater . inflate ( R . layout . custom_picker , null ); IV. Configure the ColorPickerPalette with a number of colors and a listener. colorPickerPalette . init ( colors . length , columns , mOnColorSelectedListener ); V. Call the colorPickerPalette method of ColorPickerPalette with an array of your colors and the selected default color. colorPickerPalette . drawPalette ( colors , selectedColor ); VI. Create your dialog via AlertDialog.Builder with your dark theme and your view as the content. AlertDialog alert = new AlertDialog . Builder ( this , R . style . MyDialogTheme ) . setTitle ( R . string . title_color_picker ) . setPositiveButton ( android . R . string . ok , mOnClickListener ) . setNegativeButton ( android . R . string . no , mOnClickListener ) . setView ( colorPickerPalette ) . create (); VII. Show your dialog alert . show ();","title":"How to style?"},{"location":"components/progress/","text":"Progress & activity \u00b6 Circular \u00b6 From google material design documentation . Minimize visual changes that occur while your app loads content by representing each operation with a single activity indicator. For example, a refresh operation should display either a refresh bar or an activity circle, but not both. How to add? \u00b6 I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend. android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare your ProgressBar inside any layout.xml file. <ProgressBar style= \"@style/Widget.AppCompat.ProgressBar\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> How to style? \u00b6 I. Declare custom style in your styles.xml file. <style name= \"CircularProgress\" parent= \"Theme.AppCompat.Light\" > <item name= \"colorAccent\" > @color/indigo </item> </style> II. Apply this style to your ProgressBar via android:theme attribute. <ProgressBar android:theme= \"@style/CircularProgress\" style= \"@style/Widget.AppCompat.ProgressBar\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> Linear \u00b6 From google material design documentation . A linear progress indicator should always fill from 0% to 100% and never decrease in value. It should be represented by bars on the edge of a header or sheet that appear and disappear. How to add? \u00b6 I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare your ProgressBar inside any layout.xml file. <ProgressBar style= \"@style/Widget.AppCompat.ProgressBar.Horizontal\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> Indeterminate \u00b6 To create indeterminate ProgressBar set android:indeterminate attribute to true . <ProgressBar style= \"@style/Widget.AppCompat.ProgressBar.Horizontal\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:indeterminate= \"true\" /> Determinate \u00b6 I. To create determinate ProgressBar set android:indeterminate attribute to false . <ProgressBar android:id= \"@+id/progressBar\" style= \"@style/Widget.AppCompat.ProgressBar.Horizontal\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:indeterminate= \"false\" android:max= \"100\" android:progress= \"20\" /> To specify max progress count use android:max attribute. By default it equals to 100 . To set progress default position use android:progress attribute. II. To update progress position use setProgress(int progress) method from UI thread. ProgressBar progressBar = ( ProgressBar ) findViewById ( R . id . progressBar ); progressBar . setProgress ( 50 ); Buffered \u00b6 I. To create buffered ProgressBar set android:indeterminate attribute to false . <ProgressBar android:id= \"@+id/progressBar\" style= \"@style/Widget.AppCompat.ProgressBar.Horizontal\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:indeterminate= \"false\" android:max= \"100\" android:progress= \"10\" android:secondaryProgress= \"50\" /> To set default buffer value use android:secondaryProgress attribute. II. To update buffer position use setSecondaryProgress(int progress) method. ProgressBar progressBar = ( ProgressBar ) findViewById ( R . id . progressBar ); // set current progress progressBar . setProgress ( 20 ); // set buffered progress progressBar . setSecondaryProgress ( 50 ); Indeterminate and Determinate \u00b6 To create indeterminate ProgressBar set android:indeterminate attribute to true . <ProgressBar android:id= \"@+id/progressBar\" style= \"@style/Widget.AppCompat.ProgressBar.Horizontal\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:indeterminate= \"true\" /> Whenever you need to switch from indeterminate to determinate progress use setIndeterminate(boolean indeterminate) method . ProgressBar progressBar = ( ProgressBar ) findViewById ( R . id . progressBar ); progressBar . setIndeterminate ( false ); How to style? \u00b6 I. Declare custom style in your values-v21/styles.xml file. <style name= \"LinearProgress\" parent= \"Theme.AppCompat.Light\" > <item name= \"colorAccent\" > @color/indigo </item> <item name= \"android:progressBackgroundTint\" > @color/pink </item> </style> II. Apply this style to your ProgressBar via android:theme attribute. <ProgressBar android:theme= \"@style/LinearProgress\" style= \"@style/Widget.AppCompat.ProgressBar.Horizontal\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> Note android:progressBackgroundTint attribute is working only with determinate ProgressBar","title":"Progress & activity"},{"location":"components/progress/#progress-activity","text":"","title":"Progress &amp; activity"},{"location":"components/progress/#circular","text":"From google material design documentation . Minimize visual changes that occur while your app loads content by representing each operation with a single activity indicator. For example, a refresh operation should display either a refresh bar or an activity circle, but not both.","title":"Circular"},{"location":"components/progress/#how-to-add","text":"I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend. android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare your ProgressBar inside any layout.xml file. <ProgressBar style= \"@style/Widget.AppCompat.ProgressBar\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" />","title":"How to add?"},{"location":"components/progress/#how-to-style","text":"I. Declare custom style in your styles.xml file. <style name= \"CircularProgress\" parent= \"Theme.AppCompat.Light\" > <item name= \"colorAccent\" > @color/indigo </item> </style> II. Apply this style to your ProgressBar via android:theme attribute. <ProgressBar android:theme= \"@style/CircularProgress\" style= \"@style/Widget.AppCompat.ProgressBar\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" />","title":"How to style?"},{"location":"components/progress/#linear","text":"From google material design documentation . A linear progress indicator should always fill from 0% to 100% and never decrease in value. It should be represented by bars on the edge of a header or sheet that appear and disappear.","title":"Linear"},{"location":"components/progress/#how-to-add_1","text":"I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare your ProgressBar inside any layout.xml file. <ProgressBar style= \"@style/Widget.AppCompat.ProgressBar.Horizontal\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" />","title":"How to add?"},{"location":"components/progress/#indeterminate","text":"To create indeterminate ProgressBar set android:indeterminate attribute to true . <ProgressBar style= \"@style/Widget.AppCompat.ProgressBar.Horizontal\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:indeterminate= \"true\" />","title":"Indeterminate"},{"location":"components/progress/#determinate","text":"I. To create determinate ProgressBar set android:indeterminate attribute to false . <ProgressBar android:id= \"@+id/progressBar\" style= \"@style/Widget.AppCompat.ProgressBar.Horizontal\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:indeterminate= \"false\" android:max= \"100\" android:progress= \"20\" /> To specify max progress count use android:max attribute. By default it equals to 100 . To set progress default position use android:progress attribute. II. To update progress position use setProgress(int progress) method from UI thread. ProgressBar progressBar = ( ProgressBar ) findViewById ( R . id . progressBar ); progressBar . setProgress ( 50 );","title":"Determinate"},{"location":"components/progress/#buffered","text":"I. To create buffered ProgressBar set android:indeterminate attribute to false . <ProgressBar android:id= \"@+id/progressBar\" style= \"@style/Widget.AppCompat.ProgressBar.Horizontal\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:indeterminate= \"false\" android:max= \"100\" android:progress= \"10\" android:secondaryProgress= \"50\" /> To set default buffer value use android:secondaryProgress attribute. II. To update buffer position use setSecondaryProgress(int progress) method. ProgressBar progressBar = ( ProgressBar ) findViewById ( R . id . progressBar ); // set current progress progressBar . setProgress ( 20 ); // set buffered progress progressBar . setSecondaryProgress ( 50 );","title":"Buffered"},{"location":"components/progress/#indeterminate-and-determinate","text":"To create indeterminate ProgressBar set android:indeterminate attribute to true . <ProgressBar android:id= \"@+id/progressBar\" style= \"@style/Widget.AppCompat.ProgressBar.Horizontal\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:indeterminate= \"true\" /> Whenever you need to switch from indeterminate to determinate progress use setIndeterminate(boolean indeterminate) method . ProgressBar progressBar = ( ProgressBar ) findViewById ( R . id . progressBar ); progressBar . setIndeterminate ( false );","title":"Indeterminate and Determinate"},{"location":"components/progress/#how-to-style_1","text":"I. Declare custom style in your values-v21/styles.xml file. <style name= \"LinearProgress\" parent= \"Theme.AppCompat.Light\" > <item name= \"colorAccent\" > @color/indigo </item> <item name= \"android:progressBackgroundTint\" > @color/pink </item> </style> II. Apply this style to your ProgressBar via android:theme attribute. <ProgressBar android:theme= \"@style/LinearProgress\" style= \"@style/Widget.AppCompat.ProgressBar.Horizontal\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> Note android:progressBackgroundTint attribute is working only with determinate ProgressBar","title":"How to style?"},{"location":"components/rating-bar/","text":"Rating Bar \u00b6 From google documentation . A RatingBar is an extension of SeekBar and ProgressBar that shows a rating in stars. The user can touch/drag or use arrow keys to set the rating when using the default size RatingBar. The smaller RatingBar style ( ratingBarStyleSmall ) and the larger indicator-only style ( ratingBarStyleIndicator ) do not support user interaction and should only be used as indicators. How to add? \u00b6 I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare your RatingBar inside any layout.xml file. <RatingBar android:rating= \"3.5\" android:stepSize= \"0.5\" android:numStars= \"5\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> How to style? \u00b6 I. Declare custom style in your styles.xml file. <style name= \"RatingBar\" parent= \"Theme.AppCompat\" > <item name= \"colorControlNormal\" > @color/indigo </item> <item name= \"colorControlActivated\" > @color/pink </item> </style> II. Apply this style to your RatingBar via android:theme attribute. <RatingBar android:theme= \"@style/RatingBar\" android:rating= \"3\" android:stepSize= \"0.5\" android:numStars= \"5\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" />","title":"Rating Bar"},{"location":"components/rating-bar/#rating-bar","text":"From google documentation . A RatingBar is an extension of SeekBar and ProgressBar that shows a rating in stars. The user can touch/drag or use arrow keys to set the rating when using the default size RatingBar. The smaller RatingBar style ( ratingBarStyleSmall ) and the larger indicator-only style ( ratingBarStyleIndicator ) do not support user interaction and should only be used as indicators.","title":"Rating Bar"},{"location":"components/rating-bar/#how-to-add","text":"I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare your RatingBar inside any layout.xml file. <RatingBar android:rating= \"3.5\" android:stepSize= \"0.5\" android:numStars= \"5\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" />","title":"How to add?"},{"location":"components/rating-bar/#how-to-style","text":"I. Declare custom style in your styles.xml file. <style name= \"RatingBar\" parent= \"Theme.AppCompat\" > <item name= \"colorControlNormal\" > @color/indigo </item> <item name= \"colorControlActivated\" > @color/pink </item> </style> II. Apply this style to your RatingBar via android:theme attribute. <RatingBar android:theme= \"@style/RatingBar\" android:rating= \"3\" android:stepSize= \"0.5\" android:numStars= \"5\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" />","title":"How to style?"},{"location":"components/selection-controls/","text":"Selection Controls \u00b6 Check Box \u00b6 From google material design documentation . Checkboxes allow the user to select multiple options from a set. If you have multiple options appearing in a list, you can preserve space by using checkboxes instead of on/off switches. If you have a single option, avoid using a checkbox and use an on/off switch instead. How to add? \u00b6 I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare your CheckBox inside any layout.xml file <CheckBox android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:checked= \"true\" android:text= \"Check Box\" /> How to style? \u00b6 I. Declare custom style in your styles.xml file. <style name= \"MyCheckBox\" parent= \"Theme.AppCompat.Light\" > <item name= \"colorControlNormal\" > @color/indigo </item> <item name= \"colorControlActivated\" > @color/pink </item> </style> II. Apply this style to your CheckBox via android:theme attribute. <CheckBox android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:checked= \"true\" android:text= \"Check Box\" android:theme= \"@style/MyCheckBox\" /> Radio Button \u00b6 From google material design documentation . Radio buttons allow the user to select one option from a set. Use radio buttons for exclusive selection if you think that the user needs to see all available options side-by-side. Otherwise, consider a dropdown, which uses less space than displaying all options. How to add? \u00b6 I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare your RadioButton inside any layout.xml file <RadioButton android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:checked= \"true\" android:text= \"Radio Button\" /> How to style? \u00b6 I. Declare custom style in your styles.xml file. <style name= \"MyRadioButton\" parent= \"Theme.AppCompat.Light\" > <item name= \"colorControlNormal\" > @color/indigo </item> <item name= \"colorControlActivated\" > @color/pink </item> </style> II. Apply this style to your RadioButton via android:theme attribute. <RadioButton android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:checked= \"true\" android:text= \"Radio Button\" android:theme= \"@style/MyRadioButton\" /> Switch \u00b6 From google material design documentation . On/off switches toggle the state of a single settings option. The option that the switch controls, as well as the state it\u2019s in, should be made clear from the corresponding inline label. Switches take on the same visual properties of the radio button. The on/off slide toggle with the text \u201con\u201d and \u201coff\u201d included within the asset is deprecated. Use the switch shown here instead. How to add? \u00b6 I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare your SwitchCompat inside any layout.xml file <android.support.v7.widget.SwitchCompat android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:checked= \"true\" /> Note android.support.v7.widget.SwitchCompat is a backward compatible version of the Switch widget. How to style? \u00b6 I. Declare custom style in your styles.xml file. <style name= \"MySwitch\" parent= \"Theme.AppCompat.Light\" > <!-- active thumb & track color (30% transparency) --> <item name= \"colorControlActivated\" > @color/indigo </item> <!-- inactive thumb color --> <item name= \"colorSwitchThumbNormal\" > @color/pink </item> <!-- inactive track color (30% transparency) --> <item name= \"android:colorForeground\" > @color/grey </item> </style> II. Apply this style to your SwitchCompat via android:theme attribute. <android.support.v7.widget.SwitchCompat android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:checked= \"true\" android:theme= \"@style/MySwitch\" /> Note Android automatically add 30% transparency to colorControlActivated and android:colorForeground for SwitchCompat .","title":"Selection controls"},{"location":"components/selection-controls/#selection-controls","text":"","title":"Selection Controls"},{"location":"components/selection-controls/#check-box","text":"From google material design documentation . Checkboxes allow the user to select multiple options from a set. If you have multiple options appearing in a list, you can preserve space by using checkboxes instead of on/off switches. If you have a single option, avoid using a checkbox and use an on/off switch instead.","title":"Check Box"},{"location":"components/selection-controls/#how-to-add","text":"I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare your CheckBox inside any layout.xml file <CheckBox android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:checked= \"true\" android:text= \"Check Box\" />","title":"How to add?"},{"location":"components/selection-controls/#how-to-style","text":"I. Declare custom style in your styles.xml file. <style name= \"MyCheckBox\" parent= \"Theme.AppCompat.Light\" > <item name= \"colorControlNormal\" > @color/indigo </item> <item name= \"colorControlActivated\" > @color/pink </item> </style> II. Apply this style to your CheckBox via android:theme attribute. <CheckBox android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:checked= \"true\" android:text= \"Check Box\" android:theme= \"@style/MyCheckBox\" />","title":"How to style?"},{"location":"components/selection-controls/#radio-button","text":"From google material design documentation . Radio buttons allow the user to select one option from a set. Use radio buttons for exclusive selection if you think that the user needs to see all available options side-by-side. Otherwise, consider a dropdown, which uses less space than displaying all options.","title":"Radio Button"},{"location":"components/selection-controls/#how-to-add_1","text":"I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare your RadioButton inside any layout.xml file <RadioButton android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:checked= \"true\" android:text= \"Radio Button\" />","title":"How to add?"},{"location":"components/selection-controls/#how-to-style_1","text":"I. Declare custom style in your styles.xml file. <style name= \"MyRadioButton\" parent= \"Theme.AppCompat.Light\" > <item name= \"colorControlNormal\" > @color/indigo </item> <item name= \"colorControlActivated\" > @color/pink </item> </style> II. Apply this style to your RadioButton via android:theme attribute. <RadioButton android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:checked= \"true\" android:text= \"Radio Button\" android:theme= \"@style/MyRadioButton\" />","title":"How to style?"},{"location":"components/selection-controls/#switch","text":"From google material design documentation . On/off switches toggle the state of a single settings option. The option that the switch controls, as well as the state it\u2019s in, should be made clear from the corresponding inline label. Switches take on the same visual properties of the radio button. The on/off slide toggle with the text \u201con\u201d and \u201coff\u201d included within the asset is deprecated. Use the switch shown here instead.","title":"Switch"},{"location":"components/selection-controls/#how-to-add_2","text":"I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare your SwitchCompat inside any layout.xml file <android.support.v7.widget.SwitchCompat android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:checked= \"true\" /> Note android.support.v7.widget.SwitchCompat is a backward compatible version of the Switch widget.","title":"How to add?"},{"location":"components/selection-controls/#how-to-style_2","text":"I. Declare custom style in your styles.xml file. <style name= \"MySwitch\" parent= \"Theme.AppCompat.Light\" > <!-- active thumb & track color (30% transparency) --> <item name= \"colorControlActivated\" > @color/indigo </item> <!-- inactive thumb color --> <item name= \"colorSwitchThumbNormal\" > @color/pink </item> <!-- inactive track color (30% transparency) --> <item name= \"android:colorForeground\" > @color/grey </item> </style> II. Apply this style to your SwitchCompat via android:theme attribute. <android.support.v7.widget.SwitchCompat android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:checked= \"true\" android:theme= \"@style/MySwitch\" /> Note Android automatically add 30% transparency to colorControlActivated and android:colorForeground for SwitchCompat .","title":"How to style?"},{"location":"components/snackbars-and-toasts/","text":"Snackbars & Toasts \u00b6 Snack Bar \u00b6 From google material design documentation . Snackbars provide lightweight feedback about an operation by showing a brief message at the bottom of the screen. Snackbars can contain an action. How to add? \u00b6 I. In your build.gradle add latest design library. dependencies { // optionally, Snackbar can be used in pair // with CoordinatorLayout // compile 'com.android.support:appcompat-v7:X.X.X' compile 'com.android.support:design:X.X.X' // where X.X.X version } II. Create Snackbar instance with make() method. Then call show() method. Snackbar . make ( view , \"No network connection.\" , Snackbar . LENGTH_SHORT ) . show (); Parameter view is used to find parent. Snackbar will be displayed over it. Note Snackbar will try and find a parent view to hold Snackbar's view from the value given to view. Snackbar will walk up the view tree trying to find a suitable parent, which is defined as a CoordinatorLayout or the window decor's content view, whichever comes first. Duration \u00b6 To specify how long Snackbar will be visible on screen use setDuration method. // pre defined constants Snackbar . LENGTH_SHORT // 1500 millis Snackbar . LENGTH_LONG // 2750 millis Snackbar . LENGTH_INDEFINITE // you can set custom duration snackbar . setDuration ( TimeUnit . MINUTES . toMillis ( 1 )); Dismiss \u00b6 To hide Snackbar manually at any time use dismiss() method. Snackbar snackBar = Snackbar . make ( view , text , duration ); snackBar . dismiss (); //hide snackbar Events \u00b6 To track whenever Snackbar was shown or dismissed use setCallback method. Snackbar . make (...) . setCallback ( new Snackbar . Callback () { @Override public void onDismissed ( Snackbar snackbar , int event ) { // do some action on dismiss } @Override public void onShown ( Snackbar snackbar ) { // do some action when snackbar is showed } }) Parameter event from onDismissed() is one of predefined constants in Snackbar.Callback . Actions \u00b6 Snackbar can contain an action. To add it call setAction() method. Snackbar . make (...) . setAction ( \"Retry\" , new View . OnClickListener () { @Override public void onClick ( View v ) { // retry to send email here } }) To enable swipe-to-dismiss and automatically moving of widgets like FloatingActionButton use CoordinatorLayout as your root layout. <android.support.design.widget.CoordinatorLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:tools= \"http://schemas.android.com/tools\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <android.support.design.widget.FloatingActionButton android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_gravity= \"end|bottom\" android:src= \"@android:drawable/ic_menu_call\" /> </android.support.design.widget.CoordinatorLayout> How to style? \u00b6 With theme \u00b6 I. Declare custom style in your values/styles.xml file. <style name= \"SnackbarTheme\" parent= \"Theme.AppCompat.Light\" > <item name= \"colorAccent\" > @color/indigo </item> <item name= \"android:textColor\" > @color/pink </item> </style> II. Apply this style to your Activity via android:theme attribute in AndroidManifest.xml file. <activity android:name= \".SnackbarActivity\" android:theme= \"@style/SnackbarTheme\" > </activity> Note Applying theme to Activity will apply colorAccent and android:textColor to all of its views. With code \u00b6 Get Snackbar view using getView() method and change it properties. // create instance Snackbar snackbar = Snackbar . make ( view , text , duration ); // set action button color snackbar . setActionTextColor ( getResources (). getColor ( R . color . indigo )); // get snackbar view View snackbarView = snackbar . getView (); // change snackbar text color int snackbarTextId = android . support . design . R . id . snackbar_text ; TextView textView = ( TextView ) snackbarView . findViewById ( snackbarTextId ); textView . setTextColor ( getResources (). getColor ( R . color . indigo )); // change snackbar background snackbarView . setBackgroundColor ( Color . MAGENTA ); With custom view \u00b6 I. Declare custom layout in your values/layout folder. <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:orientation= \"horizontal\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" > <Button android:id= \"@+id/snackbar_action\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_marginLeft= \"@dimen/design_snackbar_extra_spacing_horizontal\" android:layout_marginStart= \"@dimen/design_snackbar_extra_spacing_horizontal\" android:layout_gravity= \"center_vertical|right|end\" android:paddingTop= \"@dimen/design_snackbar_padding_vertical\" android:paddingBottom= \"@dimen/design_snackbar_padding_vertical\" android:paddingLeft= \"@dimen/design_snackbar_padding_horizontal\" android:paddingRight= \"@dimen/design_snackbar_padding_horizontal\" android:visibility= \"gone\" android:textColor= \"?attr/colorAccent\" style= \"?attr/borderlessButtonStyle\" /> <TextView android:gravity= \"center_vertical|right\" android:id= \"@+id/snackbar_text\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_weight= \"1\" android:paddingTop= \"@dimen/design_snackbar_padding_vertical\" android:paddingBottom= \"@dimen/design_snackbar_padding_vertical\" android:paddingLeft= \"@dimen/design_snackbar_padding_horizontal\" android:paddingRight= \"@dimen/design_snackbar_padding_horizontal\" android:textAppearance= \"@style/TextAppearance.Design.Snackbar.Message\" android:maxLines= \"@integer/design_snackbar_text_max_lines\" android:layout_gravity= \"center_vertical|left|start\" android:ellipsize= \"end\" /> </LinearLayout> Note Use @dimen/design_snackbar values to match material design guidelines. Use ?attr/colorAccent to apply your Application Theme changes to Snackbar . II. Extend BaseTransientBottomBar class. public class CustomSnackbar extends BaseTransientBottomBar < CustomSnackbar > { /** * Constructor for the transient bottom bar. * * @param parent The parent for this transient bottom bar. * @param content The content view for this transient bottom bar. * @param contentViewCallback The content view callback for this transient bottom bar. */ private CustomSnackbar ( ViewGroup parent , View content , ContentViewCallback contentViewCallback ) { super ( parent , content , contentViewCallback ); } } III. Add BaseTransientBottomBar.ContentViewCallback public class CustomSnackbar ... { ... private static class ContentViewCallback implements BaseTransientBottomBar . ContentViewCallback { // view inflated from custom layout private View content ; public ContentViewCallback ( View content ) { this . content = content ; } @Override public void animateContentIn ( int delay , int duration ) { // add custom *in animations for your views // e.g. original snackbar uses alpha animation, from 0 to 1 ViewCompat . setScaleY ( content , 0f ); ViewCompat . animate ( content ) . scaleY ( 1f ). setDuration ( duration ) . setStartDelay ( delay ); } @Override public void animateContentOut ( int delay , int duration ) { // add custom *out animations for your views // e.g. original snackbar uses alpha animation, from 1 to 0 ViewCompat . setScaleY ( content , 1f ); ViewCompat . animate ( content ) . scaleY ( 0f ) . setDuration ( duration ) . setStartDelay ( delay ); } } } IV. Add method to create Snackbar with custom layout and methods to fill it. public class final CustomSnackbar ...{ ... public static CustomSnackbar make ( ViewGroup parent , @Duration int duration ) { // inflate custom layout LayoutInflater inflater = LayoutInflater . from ( parent . getContext ()); View content = inflater . inflate ( R . layout . snackbar_view , parent , false ); // create snackbar with custom view ContentViewCallback callback = new ContentViewCallback ( content ); CustomSnackbar customSnackbar = new CustomSnackbar ( parent , content , callback ); // set snackbar duration customSnackbar . setDuration ( duration ); return customSnackbar ; } // set text in custom layout public CustomSnackbar setText ( CharSequence text ) { TextView textView = ( TextView ) getView (). findViewById ( R . id . snackbar_text ); textView . setText ( text ); return this ; } // set action in custom layout public CustomSnackbar setAction ( CharSequence text , final OnClickListener listener ) { Button actionView = ( Button ) getView (). findViewById ( R . id . snackbar_action ); actionView . setText ( text ); actionView . setVisibility ( View . VISIBLE ); actionView . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View view ) { listener . onClick ( view ); // Now dismiss the Snackbar dismiss (); } }); return this ; } } V. Create instance of CustomSnackbar and call show() method. CustomSnackbar customSnackbar = CustomSnackbar . make ( rooView , CustomSnackbar . LENGTH_INDEFINITE ); customSnackbar . setText ( \"No network connection!\" ); customSnackbar . setAction ( \"Retry\" , new View . OnClickListener () { @Override public void onClick ( View v ) { // handle click here } }); customSnackbar . show (); Toast \u00b6 From google material design documentation . Android also provides a toast, primarily used for system messaging. Toasts are similar to snackbars but do not contain actions and cannot be swiped off screen. How to add? \u00b6 Create Toast instance with make() method. Then call show() method. Toast . makeText ( context , \"No network connection.\" , duration ). show (); Duration \u00b6 To specify how long Toast will be visible on screen use duration parameter of makeText() method or setDuration method. // you can use only those 2 predefined constants duration = Toast . LENGTH_SHORT ; // 2000 millis duration = Toast . LENGTH_LONG ; // 3500 millis toast . setDuration ( duration ); Cancel \u00b6 To hide Toast manually at any time use cancel() method. Toast toast = Toast . make ( view , text , duration ). show (); toast . cancel (); //hide toast Note Close the view if it's showing, or don't show it if it isn't showing yet. You do not normally have to call this. Normally view will disappear on its own after the appropriate duration. Positioning \u00b6 To change position of Toast use setGravity() method. int gravity = Gravity . CENTER ; // the position of toast int xOffset = 0 ; // horizontal offset from current gravity int yOffset = 0 ; // vertical offset from current gravity Toast toast = Toast . make ( view , text , duration ); toast . setGravity ( gravity , xOffset , yOffset ); How to style? \u00b6 With code \u00b6 // create instance Toast toast = Toast . makeText ( context , text , duration ); // set message color TextView textView = ( TextView ) toast . getView (). findViewById ( android . R . id . message ); textView . setTextColor ( Color . YELLOW ); // set background color toast . getView (). setBackgroundColor ( getResources (). getColor ( R . color . indigo )); With custom view \u00b6 I. Declare your custom view inside of any layout.xml file. <?xml version=\"1.0\" encoding=\"utf-8\"?> <TextView xmlns:android= \"http://schemas.android.com/apk/res/android\" android:id= \"@+id/txtMessage\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:drawableStart= \"@drawable/ic_report_problem\" android:drawablePadding= \"8dp\" android:paddingTop= \"8dp\" android:paddingBottom= \"8dp\" android:paddingLeft= \"16dp\" android:paddingRight= \"16dp\" android:gravity= \"center\" android:textColor= \"@android:color/white\" android:textSize= \"16dp\" android:text= \"No connection.\" android:background= \"@color/indigo\" /> II. Set your custom view to Toast via setView() method. // create instance Toast toast = new Toast ( getApplicationContext ()); // inflate custom view View view = getLayoutInflater (). inflate ( R . layout . toast_view , null ); // set custom view toast . setView ( view ); // set duration toast . setDuration ( Toast . LENGTH_LONG ); // set position int margin = getResources (). getDimensionPixelSize ( R . dimen . toast_vertical_margin ); toast . setGravity ( Gravity . BOTTOM | Gravity . CENTER_VERTICAL , 0 , margin ); // show toast toast . show ();","title":"Snackbars & Toasts"},{"location":"components/snackbars-and-toasts/#snackbars-toasts","text":"","title":"Snackbars &amp; Toasts"},{"location":"components/snackbars-and-toasts/#snack-bar","text":"From google material design documentation . Snackbars provide lightweight feedback about an operation by showing a brief message at the bottom of the screen. Snackbars can contain an action.","title":"Snack Bar"},{"location":"components/snackbars-and-toasts/#how-to-add","text":"I. In your build.gradle add latest design library. dependencies { // optionally, Snackbar can be used in pair // with CoordinatorLayout // compile 'com.android.support:appcompat-v7:X.X.X' compile 'com.android.support:design:X.X.X' // where X.X.X version } II. Create Snackbar instance with make() method. Then call show() method. Snackbar . make ( view , \"No network connection.\" , Snackbar . LENGTH_SHORT ) . show (); Parameter view is used to find parent. Snackbar will be displayed over it. Note Snackbar will try and find a parent view to hold Snackbar's view from the value given to view. Snackbar will walk up the view tree trying to find a suitable parent, which is defined as a CoordinatorLayout or the window decor's content view, whichever comes first.","title":"How to add?"},{"location":"components/snackbars-and-toasts/#duration","text":"To specify how long Snackbar will be visible on screen use setDuration method. // pre defined constants Snackbar . LENGTH_SHORT // 1500 millis Snackbar . LENGTH_LONG // 2750 millis Snackbar . LENGTH_INDEFINITE // you can set custom duration snackbar . setDuration ( TimeUnit . MINUTES . toMillis ( 1 ));","title":"Duration"},{"location":"components/snackbars-and-toasts/#dismiss","text":"To hide Snackbar manually at any time use dismiss() method. Snackbar snackBar = Snackbar . make ( view , text , duration ); snackBar . dismiss (); //hide snackbar","title":"Dismiss"},{"location":"components/snackbars-and-toasts/#events","text":"To track whenever Snackbar was shown or dismissed use setCallback method. Snackbar . make (...) . setCallback ( new Snackbar . Callback () { @Override public void onDismissed ( Snackbar snackbar , int event ) { // do some action on dismiss } @Override public void onShown ( Snackbar snackbar ) { // do some action when snackbar is showed } }) Parameter event from onDismissed() is one of predefined constants in Snackbar.Callback .","title":"Events"},{"location":"components/snackbars-and-toasts/#actions","text":"Snackbar can contain an action. To add it call setAction() method. Snackbar . make (...) . setAction ( \"Retry\" , new View . OnClickListener () { @Override public void onClick ( View v ) { // retry to send email here } }) To enable swipe-to-dismiss and automatically moving of widgets like FloatingActionButton use CoordinatorLayout as your root layout. <android.support.design.widget.CoordinatorLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:tools= \"http://schemas.android.com/tools\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <android.support.design.widget.FloatingActionButton android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_gravity= \"end|bottom\" android:src= \"@android:drawable/ic_menu_call\" /> </android.support.design.widget.CoordinatorLayout>","title":"Actions"},{"location":"components/snackbars-and-toasts/#how-to-style","text":"","title":"How to style?"},{"location":"components/snackbars-and-toasts/#with-theme","text":"I. Declare custom style in your values/styles.xml file. <style name= \"SnackbarTheme\" parent= \"Theme.AppCompat.Light\" > <item name= \"colorAccent\" > @color/indigo </item> <item name= \"android:textColor\" > @color/pink </item> </style> II. Apply this style to your Activity via android:theme attribute in AndroidManifest.xml file. <activity android:name= \".SnackbarActivity\" android:theme= \"@style/SnackbarTheme\" > </activity> Note Applying theme to Activity will apply colorAccent and android:textColor to all of its views.","title":"With theme"},{"location":"components/snackbars-and-toasts/#with-code","text":"Get Snackbar view using getView() method and change it properties. // create instance Snackbar snackbar = Snackbar . make ( view , text , duration ); // set action button color snackbar . setActionTextColor ( getResources (). getColor ( R . color . indigo )); // get snackbar view View snackbarView = snackbar . getView (); // change snackbar text color int snackbarTextId = android . support . design . R . id . snackbar_text ; TextView textView = ( TextView ) snackbarView . findViewById ( snackbarTextId ); textView . setTextColor ( getResources (). getColor ( R . color . indigo )); // change snackbar background snackbarView . setBackgroundColor ( Color . MAGENTA );","title":"With code"},{"location":"components/snackbars-and-toasts/#with-custom-view","text":"I. Declare custom layout in your values/layout folder. <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:orientation= \"horizontal\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" > <Button android:id= \"@+id/snackbar_action\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_marginLeft= \"@dimen/design_snackbar_extra_spacing_horizontal\" android:layout_marginStart= \"@dimen/design_snackbar_extra_spacing_horizontal\" android:layout_gravity= \"center_vertical|right|end\" android:paddingTop= \"@dimen/design_snackbar_padding_vertical\" android:paddingBottom= \"@dimen/design_snackbar_padding_vertical\" android:paddingLeft= \"@dimen/design_snackbar_padding_horizontal\" android:paddingRight= \"@dimen/design_snackbar_padding_horizontal\" android:visibility= \"gone\" android:textColor= \"?attr/colorAccent\" style= \"?attr/borderlessButtonStyle\" /> <TextView android:gravity= \"center_vertical|right\" android:id= \"@+id/snackbar_text\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_weight= \"1\" android:paddingTop= \"@dimen/design_snackbar_padding_vertical\" android:paddingBottom= \"@dimen/design_snackbar_padding_vertical\" android:paddingLeft= \"@dimen/design_snackbar_padding_horizontal\" android:paddingRight= \"@dimen/design_snackbar_padding_horizontal\" android:textAppearance= \"@style/TextAppearance.Design.Snackbar.Message\" android:maxLines= \"@integer/design_snackbar_text_max_lines\" android:layout_gravity= \"center_vertical|left|start\" android:ellipsize= \"end\" /> </LinearLayout> Note Use @dimen/design_snackbar values to match material design guidelines. Use ?attr/colorAccent to apply your Application Theme changes to Snackbar . II. Extend BaseTransientBottomBar class. public class CustomSnackbar extends BaseTransientBottomBar < CustomSnackbar > { /** * Constructor for the transient bottom bar. * * @param parent The parent for this transient bottom bar. * @param content The content view for this transient bottom bar. * @param contentViewCallback The content view callback for this transient bottom bar. */ private CustomSnackbar ( ViewGroup parent , View content , ContentViewCallback contentViewCallback ) { super ( parent , content , contentViewCallback ); } } III. Add BaseTransientBottomBar.ContentViewCallback public class CustomSnackbar ... { ... private static class ContentViewCallback implements BaseTransientBottomBar . ContentViewCallback { // view inflated from custom layout private View content ; public ContentViewCallback ( View content ) { this . content = content ; } @Override public void animateContentIn ( int delay , int duration ) { // add custom *in animations for your views // e.g. original snackbar uses alpha animation, from 0 to 1 ViewCompat . setScaleY ( content , 0f ); ViewCompat . animate ( content ) . scaleY ( 1f ). setDuration ( duration ) . setStartDelay ( delay ); } @Override public void animateContentOut ( int delay , int duration ) { // add custom *out animations for your views // e.g. original snackbar uses alpha animation, from 1 to 0 ViewCompat . setScaleY ( content , 1f ); ViewCompat . animate ( content ) . scaleY ( 0f ) . setDuration ( duration ) . setStartDelay ( delay ); } } } IV. Add method to create Snackbar with custom layout and methods to fill it. public class final CustomSnackbar ...{ ... public static CustomSnackbar make ( ViewGroup parent , @Duration int duration ) { // inflate custom layout LayoutInflater inflater = LayoutInflater . from ( parent . getContext ()); View content = inflater . inflate ( R . layout . snackbar_view , parent , false ); // create snackbar with custom view ContentViewCallback callback = new ContentViewCallback ( content ); CustomSnackbar customSnackbar = new CustomSnackbar ( parent , content , callback ); // set snackbar duration customSnackbar . setDuration ( duration ); return customSnackbar ; } // set text in custom layout public CustomSnackbar setText ( CharSequence text ) { TextView textView = ( TextView ) getView (). findViewById ( R . id . snackbar_text ); textView . setText ( text ); return this ; } // set action in custom layout public CustomSnackbar setAction ( CharSequence text , final OnClickListener listener ) { Button actionView = ( Button ) getView (). findViewById ( R . id . snackbar_action ); actionView . setText ( text ); actionView . setVisibility ( View . VISIBLE ); actionView . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View view ) { listener . onClick ( view ); // Now dismiss the Snackbar dismiss (); } }); return this ; } } V. Create instance of CustomSnackbar and call show() method. CustomSnackbar customSnackbar = CustomSnackbar . make ( rooView , CustomSnackbar . LENGTH_INDEFINITE ); customSnackbar . setText ( \"No network connection!\" ); customSnackbar . setAction ( \"Retry\" , new View . OnClickListener () { @Override public void onClick ( View v ) { // handle click here } }); customSnackbar . show ();","title":"With custom view"},{"location":"components/snackbars-and-toasts/#toast","text":"From google material design documentation . Android also provides a toast, primarily used for system messaging. Toasts are similar to snackbars but do not contain actions and cannot be swiped off screen.","title":"Toast"},{"location":"components/snackbars-and-toasts/#how-to-add_1","text":"Create Toast instance with make() method. Then call show() method. Toast . makeText ( context , \"No network connection.\" , duration ). show ();","title":"How to add?"},{"location":"components/snackbars-and-toasts/#duration_1","text":"To specify how long Toast will be visible on screen use duration parameter of makeText() method or setDuration method. // you can use only those 2 predefined constants duration = Toast . LENGTH_SHORT ; // 2000 millis duration = Toast . LENGTH_LONG ; // 3500 millis toast . setDuration ( duration );","title":"Duration"},{"location":"components/snackbars-and-toasts/#cancel","text":"To hide Toast manually at any time use cancel() method. Toast toast = Toast . make ( view , text , duration ). show (); toast . cancel (); //hide toast Note Close the view if it's showing, or don't show it if it isn't showing yet. You do not normally have to call this. Normally view will disappear on its own after the appropriate duration.","title":"Cancel"},{"location":"components/snackbars-and-toasts/#positioning","text":"To change position of Toast use setGravity() method. int gravity = Gravity . CENTER ; // the position of toast int xOffset = 0 ; // horizontal offset from current gravity int yOffset = 0 ; // vertical offset from current gravity Toast toast = Toast . make ( view , text , duration ); toast . setGravity ( gravity , xOffset , yOffset );","title":"Positioning"},{"location":"components/snackbars-and-toasts/#how-to-style_1","text":"","title":"How to style?"},{"location":"components/snackbars-and-toasts/#with-code_1","text":"// create instance Toast toast = Toast . makeText ( context , text , duration ); // set message color TextView textView = ( TextView ) toast . getView (). findViewById ( android . R . id . message ); textView . setTextColor ( Color . YELLOW ); // set background color toast . getView (). setBackgroundColor ( getResources (). getColor ( R . color . indigo ));","title":"With code"},{"location":"components/snackbars-and-toasts/#with-custom-view_1","text":"I. Declare your custom view inside of any layout.xml file. <?xml version=\"1.0\" encoding=\"utf-8\"?> <TextView xmlns:android= \"http://schemas.android.com/apk/res/android\" android:id= \"@+id/txtMessage\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:drawableStart= \"@drawable/ic_report_problem\" android:drawablePadding= \"8dp\" android:paddingTop= \"8dp\" android:paddingBottom= \"8dp\" android:paddingLeft= \"16dp\" android:paddingRight= \"16dp\" android:gravity= \"center\" android:textColor= \"@android:color/white\" android:textSize= \"16dp\" android:text= \"No connection.\" android:background= \"@color/indigo\" /> II. Set your custom view to Toast via setView() method. // create instance Toast toast = new Toast ( getApplicationContext ()); // inflate custom view View view = getLayoutInflater (). inflate ( R . layout . toast_view , null ); // set custom view toast . setView ( view ); // set duration toast . setDuration ( Toast . LENGTH_LONG ); // set position int margin = getResources (). getDimensionPixelSize ( R . dimen . toast_vertical_margin ); toast . setGravity ( Gravity . BOTTOM | Gravity . CENTER_VERTICAL , 0 , margin ); // show toast toast . show ();","title":"With custom view"},{"location":"components/tabs/","text":"Tabs \u00b6 From google material design documentation Tabs make it easy to explore and switch between different views. Tabs enable content organization at a high level, such as switching between views, data sets, or functional aspects of an app. How to add? \u00b6 I. In your build.gradle add latest design and appcompat libraries. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' compile 'com.android.support:design:X.X.X' compile 'com.android.support:support-v13:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare TabLayout and ViewPager in your layout.xml file. <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:orientation= \"vertical\" > <android.support.design.widget.TabLayout android:id= \"@+id/tabLayout\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:background= \"?attr/colorPrimary\" /> <android.support.v4.view.ViewPager android:id= \"@+id/viewPager\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> </LinearLayout> IV. Setup your TabLayout with ViewPager . ViewPager viewPager = ( ViewPager ) findViewById ( R . id . viewPager ); //set adapter to your ViewPager viewPager . setAdapter ( new FragmentPagerAdapter ( getFragmentManager ())); TabLayout tabLayout = ( TabLayout ) findViewById ( R . id . tabLayout ); tabLayout . setupWithViewPager ( viewPager ); V. Override getPageTitle method in your ViewPager's adapter to return tab title. @Override public CharSequence getPageTitle ( int position ) { switch ( position ) { case ITEM_ONE : return \"Item One\" ; ... } } How to style? \u00b6 I. Declare custom style in your styles.xml file. <style name= \"TabLayoutStyle\" parent= \"Widget.Design.TabLayout\" > <item name= \"tabMaxWidth\" > @dimen/tab_max_width </item> <item name= \"tabIndicatorColor\" > @color/pink </item> <item name= \"tabIndicatorHeight\" > 2dp </item> <item name= \"tabPaddingStart\" > 8dp </item> <item name= \"tabPaddingEnd\" > 8dp </item> <item name= \"tabBackground\" > ?attr/selectableItemBackground </item> <item name= \"tabTextAppearance\" > @style/TabTextAppearance </item> <item name= \"tabSelectedTextColor\" > @android:color/white </item> </style> <style name= \"TabTextAppearance\" parent= \"TextAppearance.Design.Tab\" > <item name= \"android:textSize\" > 14sp </item> <item name= \"android:textColor\" > @color/color_white_semitransparent </item> <item name= \"textAllCaps\" > true </item> </style> II. Apply this style to your TabLayout via style attribute. <android.support.design.widget.TabLayout style= \"@style/TabLayoutStyle\" android:id= \"@+id/tabLayout\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> Tabs with icons and text \u00b6 I. Override getPageTitle method in your ViewPager's adapter to return tab title. @Override public CharSequence getPageTitle ( int position ) { switch ( position ) { case ITEM_ONE : return \"Item One\" ; ... } } II. Create selectors for every tab icon. <selector xmlns:android= \"http://schemas.android.com/apk/res/android\" > <item android:state_selected= \"true\" android:drawable= \"@drawable/ic_call_selected\" /> <item android:state_selected= \"false\" android:drawable= \"@drawable/ic_call_unselected\" /> </selector> III. To change tab icon use TabLayout.Tab#setIcon method. You can get TabLayout.Tab object via TabLayout#getTabAt method, which accept tab index as parameter. ... //after initialization TabLayout and ViewPager TabLayout . Tab tabCall = tabLayout . getTabAt ( ITEM_CALL ); tabCall . setIcon ( R . drawable . selector_call ); //repeat this code for all your tabs ... Tabs with icons only \u00b6 I. Create selectors for every tab icon. <selector xmlns:android= \"http://schemas.android.com/apk/res/android\" > <item android:state_selected= \"true\" android:drawable= \"@drawable/ic_call_selected\" /> <item android:state_selected= \"false\" android:drawable= \"@drawable/ic_call_unselected\" /> </selector> II. To change tab icon use TabLayout.Tab#setIcon method. You can get TabLayout.Tab object via TabLayout#getTabAt method, which accept tab index as parameter. ... //after initialization TabLayout and ViewPager TabLayout . Tab tabCall = tabLayout . getTabAt ( ITEM_CALL ); tabCall . setIcon ( R . drawable . selector_call ); //repeat this code for all your tabs ... Scrollable Tabs \u00b6 To make your TabLayout scrollable add custom:tabMode attribute and set it's value to scrollable . <android.support.design.widget.TabLayout xmlns:custom= \"http://schemas.android.com/apk/res-auto\" android:id= \"@+id/tabLayout\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" custom:tabMode= \"scrollable\" /> \u0421entered tabs \u00b6 To create centered tabs add custom:tabGravity attribute and set it's value to center . <android.support.design.widget.TabLayout xmlns:custom= \"http://schemas.android.com/apk/res-auto\" android:id= \"@+id/tabLayout\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" custom:tabGravity= \"center\" />","title":"Tabs"},{"location":"components/tabs/#tabs","text":"From google material design documentation Tabs make it easy to explore and switch between different views. Tabs enable content organization at a high level, such as switching between views, data sets, or functional aspects of an app.","title":"Tabs"},{"location":"components/tabs/#how-to-add","text":"I. In your build.gradle add latest design and appcompat libraries. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' compile 'com.android.support:design:X.X.X' compile 'com.android.support:support-v13:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare TabLayout and ViewPager in your layout.xml file. <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:orientation= \"vertical\" > <android.support.design.widget.TabLayout android:id= \"@+id/tabLayout\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:background= \"?attr/colorPrimary\" /> <android.support.v4.view.ViewPager android:id= \"@+id/viewPager\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> </LinearLayout> IV. Setup your TabLayout with ViewPager . ViewPager viewPager = ( ViewPager ) findViewById ( R . id . viewPager ); //set adapter to your ViewPager viewPager . setAdapter ( new FragmentPagerAdapter ( getFragmentManager ())); TabLayout tabLayout = ( TabLayout ) findViewById ( R . id . tabLayout ); tabLayout . setupWithViewPager ( viewPager ); V. Override getPageTitle method in your ViewPager's adapter to return tab title. @Override public CharSequence getPageTitle ( int position ) { switch ( position ) { case ITEM_ONE : return \"Item One\" ; ... } }","title":"How to add?"},{"location":"components/tabs/#how-to-style","text":"I. Declare custom style in your styles.xml file. <style name= \"TabLayoutStyle\" parent= \"Widget.Design.TabLayout\" > <item name= \"tabMaxWidth\" > @dimen/tab_max_width </item> <item name= \"tabIndicatorColor\" > @color/pink </item> <item name= \"tabIndicatorHeight\" > 2dp </item> <item name= \"tabPaddingStart\" > 8dp </item> <item name= \"tabPaddingEnd\" > 8dp </item> <item name= \"tabBackground\" > ?attr/selectableItemBackground </item> <item name= \"tabTextAppearance\" > @style/TabTextAppearance </item> <item name= \"tabSelectedTextColor\" > @android:color/white </item> </style> <style name= \"TabTextAppearance\" parent= \"TextAppearance.Design.Tab\" > <item name= \"android:textSize\" > 14sp </item> <item name= \"android:textColor\" > @color/color_white_semitransparent </item> <item name= \"textAllCaps\" > true </item> </style> II. Apply this style to your TabLayout via style attribute. <android.support.design.widget.TabLayout style= \"@style/TabLayoutStyle\" android:id= \"@+id/tabLayout\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" />","title":"How to style?"},{"location":"components/tabs/#tabs-with-icons-and-text","text":"I. Override getPageTitle method in your ViewPager's adapter to return tab title. @Override public CharSequence getPageTitle ( int position ) { switch ( position ) { case ITEM_ONE : return \"Item One\" ; ... } } II. Create selectors for every tab icon. <selector xmlns:android= \"http://schemas.android.com/apk/res/android\" > <item android:state_selected= \"true\" android:drawable= \"@drawable/ic_call_selected\" /> <item android:state_selected= \"false\" android:drawable= \"@drawable/ic_call_unselected\" /> </selector> III. To change tab icon use TabLayout.Tab#setIcon method. You can get TabLayout.Tab object via TabLayout#getTabAt method, which accept tab index as parameter. ... //after initialization TabLayout and ViewPager TabLayout . Tab tabCall = tabLayout . getTabAt ( ITEM_CALL ); tabCall . setIcon ( R . drawable . selector_call ); //repeat this code for all your tabs ...","title":"Tabs with icons and text"},{"location":"components/tabs/#tabs-with-icons-only","text":"I. Create selectors for every tab icon. <selector xmlns:android= \"http://schemas.android.com/apk/res/android\" > <item android:state_selected= \"true\" android:drawable= \"@drawable/ic_call_selected\" /> <item android:state_selected= \"false\" android:drawable= \"@drawable/ic_call_unselected\" /> </selector> II. To change tab icon use TabLayout.Tab#setIcon method. You can get TabLayout.Tab object via TabLayout#getTabAt method, which accept tab index as parameter. ... //after initialization TabLayout and ViewPager TabLayout . Tab tabCall = tabLayout . getTabAt ( ITEM_CALL ); tabCall . setIcon ( R . drawable . selector_call ); //repeat this code for all your tabs ...","title":"Tabs with icons only"},{"location":"components/tabs/#scrollable-tabs","text":"To make your TabLayout scrollable add custom:tabMode attribute and set it's value to scrollable . <android.support.design.widget.TabLayout xmlns:custom= \"http://schemas.android.com/apk/res-auto\" android:id= \"@+id/tabLayout\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" custom:tabMode= \"scrollable\" />","title":"Scrollable Tabs"},{"location":"components/tabs/#entered-tabs","text":"To create centered tabs add custom:tabGravity attribute and set it's value to center . <android.support.design.widget.TabLayout xmlns:custom= \"http://schemas.android.com/apk/res-auto\" android:id= \"@+id/tabLayout\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" custom:tabGravity= \"center\" />","title":"\u0421entered tabs"},{"location":"components/text-fields/","text":"Text Fields \u00b6 From google material design documentation . Text fields allow the user to input text, select text (cut, copy, paste), and lookup data via auto-completion. How to add? \u00b6 I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare your EditText inside any layout.xml file. <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"Hint text\" /> How to style? \u00b6 I. Declare custom style in your styles.xml file. <style name= \"MyEditText\" parent= \"Theme.AppCompat.Light\" > <item name= \"colorControlNormal\" > @color/indigo </item> <item name= \"colorControlActivated\" > @color/pink </item> </style> II. Apply this style to your EditText via android:theme attribute. <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"Hint text\" android:theme= \"@style/MyEditText\" /> Single-line text field \u00b6 From google material design documentation . Single-line fields automatically scroll their content to the left as the text input cursor reaches the right edge of the input field. To make your EditText single line add android:inputType attribute and set it's value to text . <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:inputType= \"text\" android:hint= \"Hint text\" /> Multi-line text field \u00b6 From google material design documentation . Multi-line text fields automatically break to a new line for overflow text and scroll vertically when the cursor reaches the lower edge. To make your EditText multi-line add android:inputType attribute and set it's value to textMultiLine . <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:inputType= \"textMultiLine\" android:hint= \"Hint text\" /> Full-width text field \u00b6 From google material design documentation . Full-width text fields are useful for more in-depth tasks. I. Declare custom style in your styles.xml file. <style name= \"FullWidthEditText\" parent= \"Widget.AppCompat.EditText\" > <item name= \"android:padding\" > 20dp </item> <item name= \"android:background\" > @null </item> <item name= \"android:textSize\" > @dimen/abc_text_size_subhead_material </item> </style> II. Apply this style to your EditText via style attribute. <EditText style= \"@style/FullWidthEditText\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"Subject\" /> Floating labels \u00b6 From google material design documentation . When the user engages with the text input field, the floating inline labels move to float above the field. How to add? \u00b6 I. In your build.gradle add latest appcompat and design libraries. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version compile 'com.android.support:design:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare your EditText inside any layout.xml file and wrap it with TextInputLayout . <android.support.design.widget.TextInputLayout android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" > <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"@string/Title\" /> </android.support.design.widget.TextInputLayout> Note Both widgets TextInputLayout and EditText have android:hint attribute, you can use any of them. If your app supports landscape mode, replace EditText with TextInputEditText in order for the hint to display correctly. How to style? \u00b6 I. Declare custom styles in your styles.xml file. <!--Floating label text style--> <style name= \"MyHintText\" parent= \"TextAppearance.AppCompat.Small\" > <item name= \"android:textColor\" > @color/pink </item> </style> <!--Input field style--> <style name= \"MyEditText\" parent= \"Theme.AppCompat.Light\" > <item name= \"colorControlNormal\" > @color/indigo </item> <item name= \"colorControlActivated\" > @color/pink </item> </style> II. Apply this styles to your TextInputLayout via app:hintTextAppearance attribute and to EditText via android:theme attribute. <android.support.design.widget.TextInputLayout android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" app:hintTextAppearance= \"@style/MyHintText\" > <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"@string/Title\" android:theme= \"@style/MyEditText\" /> </android.support.design.widget.TextInputLayout> User input errors \u00b6 From google material design documentation . Help users fix input errors as soon as they are detected. Disable the submission of a form if errors are detected, and if detected only after form submission, clearly explain the error and how to fix it. How to add? \u00b6 I. In your build.gradle add latest appcompat and design libraries. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version compile 'com.android.support:design:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare your EditText inside any layout.xml file and wrap it with TextInputLayout . <android.support.design.widget.TextInputLayout android:id= \"@+id/inputLayout\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" app:errorEnabled= \"true\" > <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"@string/First_name\" /> </android.support.design.widget.TextInputLayout> IV. To show/hide error use TextInputLayout#setError . TextInputLayout inputLayout = ( TextInputLayout ) findViewById ( R . id . inputLayout ); inputLayout . setError ( \"First name is required\" ); // show error inputLayout . setError ( null ); // hide error Note Declare app:errorEnabled=\"true\" attribute inside TextInputLayout to reserve space for error label below EditText . How to style? \u00b6 I. Declare custom styles in your styles.xml file. <!--Error label text style--> <style name= \"MyErrorText\" parent= \"TextAppearance.AppCompat.Small\" > <item name= \"android:textColor\" > @color/pink </item> </style> <!--Input field style--> <style name= \"MyEditText\" parent= \"Theme.AppCompat.Light\" > <item name= \"colorControlNormal\" > @color/indigo </item> <item name= \"colorControlActivated\" > @color/pink </item> </style> II. Apply this styles to your TextInputLayout via app:errorTextAppearance attribute and to EditText via android:theme attribute. <android.support.design.widget.TextInputLayout android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" app:errorTextAppearance= \"@style/MyErrorText\" app:errorEnabled= \"true\" > <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"@string/Title\" android:theme= \"@style/MyEditText\" /> </android.support.design.widget.TextInputLayout> Character counter \u00b6 From google material design documentation . Use a character counter in fields where a character restriction is in place. How to add? \u00b6 I. In your build.gradle add latest appcompat and design libraries. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version compile 'com.android.support:design:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare your EditText inside any layout.xml file and wrap it with TextInputLayout . Add app:counterEnabled attribute and set its value to true . To restrict maximum characters count set some integer value to app:counterMaxLength attribute. <android.support.design.widget.TextInputLayout android:id= \"@+id/inputLayout\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" app:counterEnabled= \"true\" app:counterMaxLength= \"140\" > <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"hint text\" /> </android.support.design.widget.TextInputLayout> How to style? \u00b6 To define a custom style for the overflow. I. Define the text style. <!--Overflow label text style--> <style name= \"MyOverflowText\" parent= \"TextAppearance.AppCompat.Small\" > <item name= \"android:textColor\" > @color/deep_orange </item> </style> II. Apply this styles to your TextInputLayout via app:counterOverflowTextAppearance attribute. app:counterOverflowTextAppearance=\"@style/MyOverflowText\" Password toggle \u00b6 From google material design documentation . When the visibility icon is displayed with a text field, it indicates whether or not that field\u2019s input is visible. A text field\u2019s visibility may be toggled on or off using the icon. How to add? \u00b6 I. In your build.gradle add latest appcompat and design libraries. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version compile 'com.android.support:design:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare your EditText inside any layout.xml file and wrap it with TextInputLayout . Add app:passwordToggleEnabled and set its value to true . <android.support.design.widget.TextInputLayout android:id= \"@+id/inputLayout\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" app:passwordToggleEnabled= \"true\" > <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:inputType= \"textPassword\" android:hint= \"Password\" /> </android.support.design.widget.TextInputLayout> Note Declare app:passwordToggleContentDescription attribute inside TextInputLayout for accessibility purposes. How to style? \u00b6 To change the color of the password toggle icon, use the app:passwordToggleTint attribute: <android.support.design.widget.TextInputLayout android:id= \"@+id/inputLayout\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" app:passwordToggleEnabled= \"true\" app:passwordToggleTint= \"@color/colorAccent\" > <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"Password\" /> </android.support.design.widget.TextInputLayout> Moreover, you can specify the blending mode with the app:passwordToggleTintMode attribute. Icon \u00b6 To change the password toggle icon, use the app:passwordToggleDrawable attribute: <android.support.design.widget.TextInputLayout android:id= \"@+id/inputLayout\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" app:passwordToggleEnabled= \"true\" app:passwordToggleDrawable= \"@drawable/ic_lock\" > <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"Password\" /> </android.support.design.widget.TextInputLayout> Use a StateListDrawable with the android:state_checked attribute to use separate drawables for each toggle state. Moreover, choose an AnimatedStateListDrawable to animate the drawables between states.","title":"Text fields"},{"location":"components/text-fields/#text-fields","text":"From google material design documentation . Text fields allow the user to input text, select text (cut, copy, paste), and lookup data via auto-completion.","title":"Text Fields"},{"location":"components/text-fields/#how-to-add","text":"I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare your EditText inside any layout.xml file. <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"Hint text\" />","title":"How to add?"},{"location":"components/text-fields/#how-to-style","text":"I. Declare custom style in your styles.xml file. <style name= \"MyEditText\" parent= \"Theme.AppCompat.Light\" > <item name= \"colorControlNormal\" > @color/indigo </item> <item name= \"colorControlActivated\" > @color/pink </item> </style> II. Apply this style to your EditText via android:theme attribute. <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"Hint text\" android:theme= \"@style/MyEditText\" />","title":"How to style?"},{"location":"components/text-fields/#single-line-text-field","text":"From google material design documentation . Single-line fields automatically scroll their content to the left as the text input cursor reaches the right edge of the input field. To make your EditText single line add android:inputType attribute and set it's value to text . <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:inputType= \"text\" android:hint= \"Hint text\" />","title":"Single-line text field"},{"location":"components/text-fields/#multi-line-text-field","text":"From google material design documentation . Multi-line text fields automatically break to a new line for overflow text and scroll vertically when the cursor reaches the lower edge. To make your EditText multi-line add android:inputType attribute and set it's value to textMultiLine . <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:inputType= \"textMultiLine\" android:hint= \"Hint text\" />","title":"Multi-line text field"},{"location":"components/text-fields/#full-width-text-field","text":"From google material design documentation . Full-width text fields are useful for more in-depth tasks. I. Declare custom style in your styles.xml file. <style name= \"FullWidthEditText\" parent= \"Widget.AppCompat.EditText\" > <item name= \"android:padding\" > 20dp </item> <item name= \"android:background\" > @null </item> <item name= \"android:textSize\" > @dimen/abc_text_size_subhead_material </item> </style> II. Apply this style to your EditText via style attribute. <EditText style= \"@style/FullWidthEditText\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"Subject\" />","title":"Full-width text field"},{"location":"components/text-fields/#floating-labels","text":"From google material design documentation . When the user engages with the text input field, the floating inline labels move to float above the field.","title":"Floating labels"},{"location":"components/text-fields/#how-to-add_1","text":"I. In your build.gradle add latest appcompat and design libraries. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version compile 'com.android.support:design:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare your EditText inside any layout.xml file and wrap it with TextInputLayout . <android.support.design.widget.TextInputLayout android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" > <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"@string/Title\" /> </android.support.design.widget.TextInputLayout> Note Both widgets TextInputLayout and EditText have android:hint attribute, you can use any of them. If your app supports landscape mode, replace EditText with TextInputEditText in order for the hint to display correctly.","title":"How to add?"},{"location":"components/text-fields/#how-to-style_1","text":"I. Declare custom styles in your styles.xml file. <!--Floating label text style--> <style name= \"MyHintText\" parent= \"TextAppearance.AppCompat.Small\" > <item name= \"android:textColor\" > @color/pink </item> </style> <!--Input field style--> <style name= \"MyEditText\" parent= \"Theme.AppCompat.Light\" > <item name= \"colorControlNormal\" > @color/indigo </item> <item name= \"colorControlActivated\" > @color/pink </item> </style> II. Apply this styles to your TextInputLayout via app:hintTextAppearance attribute and to EditText via android:theme attribute. <android.support.design.widget.TextInputLayout android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" app:hintTextAppearance= \"@style/MyHintText\" > <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"@string/Title\" android:theme= \"@style/MyEditText\" /> </android.support.design.widget.TextInputLayout>","title":"How to style?"},{"location":"components/text-fields/#user-input-errors","text":"From google material design documentation . Help users fix input errors as soon as they are detected. Disable the submission of a form if errors are detected, and if detected only after form submission, clearly explain the error and how to fix it.","title":"User input errors"},{"location":"components/text-fields/#how-to-add_2","text":"I. In your build.gradle add latest appcompat and design libraries. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version compile 'com.android.support:design:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare your EditText inside any layout.xml file and wrap it with TextInputLayout . <android.support.design.widget.TextInputLayout android:id= \"@+id/inputLayout\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" app:errorEnabled= \"true\" > <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"@string/First_name\" /> </android.support.design.widget.TextInputLayout> IV. To show/hide error use TextInputLayout#setError . TextInputLayout inputLayout = ( TextInputLayout ) findViewById ( R . id . inputLayout ); inputLayout . setError ( \"First name is required\" ); // show error inputLayout . setError ( null ); // hide error Note Declare app:errorEnabled=\"true\" attribute inside TextInputLayout to reserve space for error label below EditText .","title":"How to add?"},{"location":"components/text-fields/#how-to-style_2","text":"I. Declare custom styles in your styles.xml file. <!--Error label text style--> <style name= \"MyErrorText\" parent= \"TextAppearance.AppCompat.Small\" > <item name= \"android:textColor\" > @color/pink </item> </style> <!--Input field style--> <style name= \"MyEditText\" parent= \"Theme.AppCompat.Light\" > <item name= \"colorControlNormal\" > @color/indigo </item> <item name= \"colorControlActivated\" > @color/pink </item> </style> II. Apply this styles to your TextInputLayout via app:errorTextAppearance attribute and to EditText via android:theme attribute. <android.support.design.widget.TextInputLayout android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" app:errorTextAppearance= \"@style/MyErrorText\" app:errorEnabled= \"true\" > <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"@string/Title\" android:theme= \"@style/MyEditText\" /> </android.support.design.widget.TextInputLayout>","title":"How to style?"},{"location":"components/text-fields/#character-counter","text":"From google material design documentation . Use a character counter in fields where a character restriction is in place.","title":"Character counter"},{"location":"components/text-fields/#how-to-add_3","text":"I. In your build.gradle add latest appcompat and design libraries. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version compile 'com.android.support:design:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare your EditText inside any layout.xml file and wrap it with TextInputLayout . Add app:counterEnabled attribute and set its value to true . To restrict maximum characters count set some integer value to app:counterMaxLength attribute. <android.support.design.widget.TextInputLayout android:id= \"@+id/inputLayout\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" app:counterEnabled= \"true\" app:counterMaxLength= \"140\" > <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"hint text\" /> </android.support.design.widget.TextInputLayout>","title":"How to add?"},{"location":"components/text-fields/#how-to-style_3","text":"To define a custom style for the overflow. I. Define the text style. <!--Overflow label text style--> <style name= \"MyOverflowText\" parent= \"TextAppearance.AppCompat.Small\" > <item name= \"android:textColor\" > @color/deep_orange </item> </style> II. Apply this styles to your TextInputLayout via app:counterOverflowTextAppearance attribute. app:counterOverflowTextAppearance=\"@style/MyOverflowText\"","title":"How to style?"},{"location":"components/text-fields/#password-toggle","text":"From google material design documentation . When the visibility icon is displayed with a text field, it indicates whether or not that field\u2019s input is visible. A text field\u2019s visibility may be toggled on or off using the icon.","title":"Password toggle"},{"location":"components/text-fields/#how-to-add_4","text":"I. In your build.gradle add latest appcompat and design libraries. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version compile 'com.android.support:design:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MainActivity extends AppCompatActivity { ... } III. Declare your EditText inside any layout.xml file and wrap it with TextInputLayout . Add app:passwordToggleEnabled and set its value to true . <android.support.design.widget.TextInputLayout android:id= \"@+id/inputLayout\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" app:passwordToggleEnabled= \"true\" > <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:inputType= \"textPassword\" android:hint= \"Password\" /> </android.support.design.widget.TextInputLayout> Note Declare app:passwordToggleContentDescription attribute inside TextInputLayout for accessibility purposes.","title":"How to add?"},{"location":"components/text-fields/#how-to-style_4","text":"To change the color of the password toggle icon, use the app:passwordToggleTint attribute: <android.support.design.widget.TextInputLayout android:id= \"@+id/inputLayout\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" app:passwordToggleEnabled= \"true\" app:passwordToggleTint= \"@color/colorAccent\" > <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"Password\" /> </android.support.design.widget.TextInputLayout> Moreover, you can specify the blending mode with the app:passwordToggleTintMode attribute.","title":"How to style?"},{"location":"components/text-fields/#icon","text":"To change the password toggle icon, use the app:passwordToggleDrawable attribute: <android.support.design.widget.TextInputLayout android:id= \"@+id/inputLayout\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" app:passwordToggleEnabled= \"true\" app:passwordToggleDrawable= \"@drawable/ic_lock\" > <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"Password\" /> </android.support.design.widget.TextInputLayout> Use a StateListDrawable with the android:state_checked attribute to use separate drawables for each toggle state. Moreover, choose an AnimatedStateListDrawable to animate the drawables between states.","title":"Icon"},{"location":"components/toolbars/","text":"Toolbars \u00b6 From the google material design documentation Toolbars appear a step above the sheet of paper affected by their actions. When sheets scroll underneath toolbars, they are clipped and cannot pass through to the opposite side. How to add? \u00b6 I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MyActivity extends AppCompatActivity { ... } III. Declare your Toolbar inside any layout.xml file. <android.support.v7.widget.Toolbar android:layout_width= \"fill_parent\" android:layout_height= \"?attr/actionBarSize\" android:background= \"?colorPrimary\" app:theme= \"@style/ThemeOverlay.AppCompat.Dark.ActionBar\" /> !> In order to use the method setSupportActionBar make sure that your Activity uses the Theme.AppCompat.NoActionBar theme. How to style? \u00b6 I. Declare custom styles in your style.xml file. <style name= \"ToolbarTextAppearance\" > <item name= \"android:fontFamily\" > sans-serif-condensed </item> <item name= \"android:textColor\" > @android:color/white </item> <item name= \"android:shadowDx\" > 1 </item> <item name= \"android:shadowDy\" > 1 </item> <item name= \"android:shadowRadius\" > 2 </item> <item name= \"android:shadowColor\" > ?colorAccent </item> </style> <style name= \"ToolbarTextAppearance.Title\" > <item name= \"android:textSize\" > 20sp </item> </style> <style name= \"ToolbarTextAppearance.Subtitle\" > <item name= \"android:textSize\" > 14sp </item> </style> <style name= \"MyToolbar\" > <item name= \"theme\" > @style/ThemeOverlay.AppCompat.Dark </item> <item name= \"android:background\" > ?colorPrimary </item> <item name= \"android:elevation\" > 4dp </item> </style> II. Apply these styles to your Toolbar via style , tittleTextAppearance and subtittleTextAppearance attributes. <android.support.v7.widget.Toolbar android:id= \"@+id/toolbar\" android:layout_width= \"match_parent\" android:layout_height= \"?actionBarSize\" app:title= \"Toolbar\" app:subtitle= \"Toolbars are amazing\" app:titleTextAppearance= \"@style/ToolbarTextAppearance.Title\" app:subtitleTextAppearance= \"@style/ToolbarTextAppearance.Subtitle\" style= \"@style/MyToolbar\" /> Toolbar with menu icons \u00b6 I. Create items for every action. <menu xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:tools= \"http://schemas.android.com/tools\" > <item android:id= \"@+id/action_favorite\" android:icon= \"@drawable/ic_favorite\" app:showAsAction= \"always\" /> <item android:id= \"@+id/action_search\" android:icon= \"@drawable/ic_search\" app:showAsAction= \"always\" /> <item android:id= \"@+id/action_settings\" android:orderInCategory= \"100\" android:title= \"@string/action_settings\" app:showAsAction= \"never\" /> </menu> II. Inflate your menu via inflateMenu method Toolbar toolbar = ( Toolbar ) findViewById ( R . id . toolbar ); toolbar . inflateMenu ( R . menu . main ); II. Make your activity implement Toolbar.OnMenuItemClickListener . public class MyActivity extends AppCompatActivity implements Toolbar . OnMenuItemClickListener { ... } III. Reference your activity which implements the listener in your toolbar. toolbar . setOnMenuItemClickListener ( this ); IV. Implement your actions inside the onMenuItemClick method. @Override public boolean onMenuItemClick ( MenuItem item ) { switch ( item . getItemId ()) { case R . id . action_favorite : Toast . makeText ( this , \"Favorite\" , Toast . LENGTH_SHORT ). show (); return true ; case R . id . action_search : Toast . makeText ( this , \"Search\" , Toast . LENGTH_SHORT ). show (); return true ; } return true ; } Toolbar with navigation back icon \u00b6 I. Declare custom style in your styles.xml file. <style name= \"MyToolbar\" > <item name= \"theme\" > @style/ThemeOverlay.AppCompat.Dark </item> <item name= \"navigationIcon\" > @drawable/abc_ic_ab_back_mtrl_am_alpha </item> <item name= \"android:background\" > ?colorPrimary </item> <item name= \"android:elevation\" > 4dp </item> </style> II. Apply this style to your Toolbar via style attribute. <android.support.v7.widget.Toolbar android:id= \"@+id/toolbar\" android:layout_width= \"match_parent\" android:layout_height= \"?actionBarSize\" app:title= \"Toolbar\" app:subtitle= \"Toolbars are amazing\" style= \"@style/MyToolbar\" /> III. Reference a listener to handle the navigation back action. toolbar . setNavigationOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { onBackPressed (); } }); Toolbar with blank space \u00b6 I. Declare custom style in your styles.xml file. <style name= \"MyToolbar\" > <item name= \"theme\" > @style/ThemeOverlay.AppCompat.Dark </item> <item name= \"navigationIcon\" > @drawable/abc_ic_ab_back_mtrl_am_alpha </item> <item name= \"titleMarginTop\" > ?actionBarSize </item> <item name= \"android:background\" > ?colorPrimary </item> <item name= \"android:elevation\" > 4dp </item> </style> II. Apply this style to your Toolbar via style attribute. <android.support.v7.widget.Toolbar android:id= \"@+id/toolbar\" android:layout_width= \"match_parent\" android:layout_height= \"112dp\" app:title= \"Toolbar\" app:subtitle= \"Toolbars are really cool\" style= \"@style/MyToolbar\" />","title":"Toolbars"},{"location":"components/toolbars/#toolbars","text":"From the google material design documentation Toolbars appear a step above the sheet of paper affected by their actions. When sheets scroll underneath toolbars, they are clipped and cannot pass through to the opposite side.","title":"Toolbars"},{"location":"components/toolbars/#how-to-add","text":"I. In your build.gradle add latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // where X.X.X version } II. Make your activity extend android.support.v7.app.AppCompatActivity . public class MyActivity extends AppCompatActivity { ... } III. Declare your Toolbar inside any layout.xml file. <android.support.v7.widget.Toolbar android:layout_width= \"fill_parent\" android:layout_height= \"?attr/actionBarSize\" android:background= \"?colorPrimary\" app:theme= \"@style/ThemeOverlay.AppCompat.Dark.ActionBar\" /> !> In order to use the method setSupportActionBar make sure that your Activity uses the Theme.AppCompat.NoActionBar theme.","title":"How to add?"},{"location":"components/toolbars/#how-to-style","text":"I. Declare custom styles in your style.xml file. <style name= \"ToolbarTextAppearance\" > <item name= \"android:fontFamily\" > sans-serif-condensed </item> <item name= \"android:textColor\" > @android:color/white </item> <item name= \"android:shadowDx\" > 1 </item> <item name= \"android:shadowDy\" > 1 </item> <item name= \"android:shadowRadius\" > 2 </item> <item name= \"android:shadowColor\" > ?colorAccent </item> </style> <style name= \"ToolbarTextAppearance.Title\" > <item name= \"android:textSize\" > 20sp </item> </style> <style name= \"ToolbarTextAppearance.Subtitle\" > <item name= \"android:textSize\" > 14sp </item> </style> <style name= \"MyToolbar\" > <item name= \"theme\" > @style/ThemeOverlay.AppCompat.Dark </item> <item name= \"android:background\" > ?colorPrimary </item> <item name= \"android:elevation\" > 4dp </item> </style> II. Apply these styles to your Toolbar via style , tittleTextAppearance and subtittleTextAppearance attributes. <android.support.v7.widget.Toolbar android:id= \"@+id/toolbar\" android:layout_width= \"match_parent\" android:layout_height= \"?actionBarSize\" app:title= \"Toolbar\" app:subtitle= \"Toolbars are amazing\" app:titleTextAppearance= \"@style/ToolbarTextAppearance.Title\" app:subtitleTextAppearance= \"@style/ToolbarTextAppearance.Subtitle\" style= \"@style/MyToolbar\" />","title":"How to style?"},{"location":"components/toolbars/#toolbar-with-menu-icons","text":"I. Create items for every action. <menu xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:tools= \"http://schemas.android.com/tools\" > <item android:id= \"@+id/action_favorite\" android:icon= \"@drawable/ic_favorite\" app:showAsAction= \"always\" /> <item android:id= \"@+id/action_search\" android:icon= \"@drawable/ic_search\" app:showAsAction= \"always\" /> <item android:id= \"@+id/action_settings\" android:orderInCategory= \"100\" android:title= \"@string/action_settings\" app:showAsAction= \"never\" /> </menu> II. Inflate your menu via inflateMenu method Toolbar toolbar = ( Toolbar ) findViewById ( R . id . toolbar ); toolbar . inflateMenu ( R . menu . main ); II. Make your activity implement Toolbar.OnMenuItemClickListener . public class MyActivity extends AppCompatActivity implements Toolbar . OnMenuItemClickListener { ... } III. Reference your activity which implements the listener in your toolbar. toolbar . setOnMenuItemClickListener ( this ); IV. Implement your actions inside the onMenuItemClick method. @Override public boolean onMenuItemClick ( MenuItem item ) { switch ( item . getItemId ()) { case R . id . action_favorite : Toast . makeText ( this , \"Favorite\" , Toast . LENGTH_SHORT ). show (); return true ; case R . id . action_search : Toast . makeText ( this , \"Search\" , Toast . LENGTH_SHORT ). show (); return true ; } return true ; }","title":"Toolbar with menu icons"},{"location":"components/toolbars/#toolbar-with-navigation-back-icon","text":"I. Declare custom style in your styles.xml file. <style name= \"MyToolbar\" > <item name= \"theme\" > @style/ThemeOverlay.AppCompat.Dark </item> <item name= \"navigationIcon\" > @drawable/abc_ic_ab_back_mtrl_am_alpha </item> <item name= \"android:background\" > ?colorPrimary </item> <item name= \"android:elevation\" > 4dp </item> </style> II. Apply this style to your Toolbar via style attribute. <android.support.v7.widget.Toolbar android:id= \"@+id/toolbar\" android:layout_width= \"match_parent\" android:layout_height= \"?actionBarSize\" app:title= \"Toolbar\" app:subtitle= \"Toolbars are amazing\" style= \"@style/MyToolbar\" /> III. Reference a listener to handle the navigation back action. toolbar . setNavigationOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { onBackPressed (); } });","title":"Toolbar with navigation back icon"},{"location":"components/toolbars/#toolbar-with-blank-space","text":"I. Declare custom style in your styles.xml file. <style name= \"MyToolbar\" > <item name= \"theme\" > @style/ThemeOverlay.AppCompat.Dark </item> <item name= \"navigationIcon\" > @drawable/abc_ic_ab_back_mtrl_am_alpha </item> <item name= \"titleMarginTop\" > ?actionBarSize </item> <item name= \"android:background\" > ?colorPrimary </item> <item name= \"android:elevation\" > 4dp </item> </style> II. Apply this style to your Toolbar via style attribute. <android.support.v7.widget.Toolbar android:id= \"@+id/toolbar\" android:layout_width= \"match_parent\" android:layout_height= \"112dp\" app:title= \"Toolbar\" app:subtitle= \"Toolbars are really cool\" style= \"@style/MyToolbar\" />","title":"Toolbar with blank space"},{"location":"patterns/data-formats/","text":"Data formats \u00b6 Date & time \u00b6 From the Google material design documentation How you format the date and time depends on a few factors: If the time or date is the current one Whether you are using the 12-hour or 24-hour clock How specific you need to be I. Declare a TextView in your layout file. <TextView android:id= \"@+id/hora\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> II. In your Activity, get the time format which corresponds the locale and configuration of the device. // import android.text.format.DateFormat DateFormat timeFormat = DateFormat . getTimeFormat ( context ); III. Get the text with the current time and insert it in the TextView TextView hourTextView = ( TextView ) findViewById ( R . id . hourTextView ); horaTextView . setText ( timeFormat . format ( new Date ())); I. Declare a TextView in your layout file. <TextView android:id= \"@+id/fecha\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> II. In your Activity , get the format of the date which corresponds to the locale and configuration of the devices. Depending on the available space you can use medium, long or numeric format. DateFormat numericDateFormat = DateFormat . getDateFormat ( context ); DateFormat mediumDateFormat = DateFormat . getMediumDateFormat ( context ); DateFormat longDateFormat = DateFormat . getLongDateFormat ( context ); III. Get the text with the actual date and put it in your TextView TextView fechaTextView = ( TextView ) findViewById ( R . id . dateTextView ); fechaTextView . setText ( longDateFormat . format ( new Date ())); Note The DateFormat class allows many configurations according to your specific needs, for more information see the development guides . Data redaction and truncation \u00b6 Redacting numbers \u00b6 !!! note \"From Google material design documentation \". Midline ellipses [\u2022 \u2022 \u2022] are three-bullet glyphs used to represent numeric truncation and the redaction of sensitive data, such as credit card, debit card, and Social Security numbers. I. Declare a TextView in the layout of your Activity . <TextView android:id= \"@+id/numero_tarjeta\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> II. Get the characters corresponding to the points and short spaces. String space = \"\\u0020\" ; String thinSpace = \"\\u2006\" ; String bullet = \"\\u2022\" ; III. Build the final text pattern separating the points with short spaces. Between the text and ellipsis must have two normal spaces, and between the ellipsis and the remaining numbers must be just one short space. String creditCardFinalDigits = \"1234\" ; String finalText = \"Visa\" + space + space + bullet + thinSpace + bullet + thinSpace + bullet + thinSpace + creditCardFinalDigits ; IV. Add your text to the TextView . TextView cardTextView = ( TextView ) findViewById ( R . id . creditcard_textview ); cardTextView . setText ( finalText ); Redacting letters \u00b6 From Google material design documentation . Baseline ellipses [...] represent letters, words or phrases that aren\u2019t shown. They also represent text truncation of a name or email address. To automatically place ellipses depending on the space available: I. Declare a TextView in the layout of your Activity with the attributes lines=\"1\" and ellipsize=\"end\" . <TextView android:id= \"@+id/titleTextView\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:lines= \"1\" android:ellipsize= \"end\" /> II. Add a large text to the TextView . TextView titleTextView = ( TextView ) findViewById ( R . id . titleTextView ); titleTextView . setText ( R . string . bat );","title":"Data formats"},{"location":"patterns/data-formats/#data-formats","text":"","title":"Data formats"},{"location":"patterns/data-formats/#date-time","text":"From the Google material design documentation How you format the date and time depends on a few factors: If the time or date is the current one Whether you are using the 12-hour or 24-hour clock How specific you need to be I. Declare a TextView in your layout file. <TextView android:id= \"@+id/hora\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> II. In your Activity, get the time format which corresponds the locale and configuration of the device. // import android.text.format.DateFormat DateFormat timeFormat = DateFormat . getTimeFormat ( context ); III. Get the text with the current time and insert it in the TextView TextView hourTextView = ( TextView ) findViewById ( R . id . hourTextView ); horaTextView . setText ( timeFormat . format ( new Date ())); I. Declare a TextView in your layout file. <TextView android:id= \"@+id/fecha\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> II. In your Activity , get the format of the date which corresponds to the locale and configuration of the devices. Depending on the available space you can use medium, long or numeric format. DateFormat numericDateFormat = DateFormat . getDateFormat ( context ); DateFormat mediumDateFormat = DateFormat . getMediumDateFormat ( context ); DateFormat longDateFormat = DateFormat . getLongDateFormat ( context ); III. Get the text with the actual date and put it in your TextView TextView fechaTextView = ( TextView ) findViewById ( R . id . dateTextView ); fechaTextView . setText ( longDateFormat . format ( new Date ())); Note The DateFormat class allows many configurations according to your specific needs, for more information see the development guides .","title":"Date &amp; time"},{"location":"patterns/data-formats/#data-redaction-and-truncation","text":"","title":"Data redaction and truncation"},{"location":"patterns/data-formats/#redacting-numbers","text":"!!! note \"From Google material design documentation \". Midline ellipses [\u2022 \u2022 \u2022] are three-bullet glyphs used to represent numeric truncation and the redaction of sensitive data, such as credit card, debit card, and Social Security numbers. I. Declare a TextView in the layout of your Activity . <TextView android:id= \"@+id/numero_tarjeta\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> II. Get the characters corresponding to the points and short spaces. String space = \"\\u0020\" ; String thinSpace = \"\\u2006\" ; String bullet = \"\\u2022\" ; III. Build the final text pattern separating the points with short spaces. Between the text and ellipsis must have two normal spaces, and between the ellipsis and the remaining numbers must be just one short space. String creditCardFinalDigits = \"1234\" ; String finalText = \"Visa\" + space + space + bullet + thinSpace + bullet + thinSpace + bullet + thinSpace + creditCardFinalDigits ; IV. Add your text to the TextView . TextView cardTextView = ( TextView ) findViewById ( R . id . creditcard_textview ); cardTextView . setText ( finalText );","title":"Redacting numbers"},{"location":"patterns/data-formats/#redacting-letters","text":"From Google material design documentation . Baseline ellipses [...] represent letters, words or phrases that aren\u2019t shown. They also represent text truncation of a name or email address. To automatically place ellipses depending on the space available: I. Declare a TextView in the layout of your Activity with the attributes lines=\"1\" and ellipsize=\"end\" . <TextView android:id= \"@+id/titleTextView\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:lines= \"1\" android:ellipsize= \"end\" /> II. Add a large text to the TextView . TextView titleTextView = ( TextView ) findViewById ( R . id . titleTextView ); titleTextView . setText ( R . string . bat );","title":"Redacting letters"},{"location":"patterns/launch-screen/","text":"Launch screens \u00b6 From google material design documentation . The launch screen is a user\u2019s first experience of your application. Because launching your app while displaying a blank canvas increases its perceived loading time, consider using a placeholder UI or a branded launch screen. How to add? \u00b6 I. Declare custom drawable.xml file with items for launch screen background. <layer-list xmlns:android= \"http://schemas.android.com/apk/res/android\" > <item android:drawable= \"@color/blue\" /> <item> <bitmap android:gravity= \"center\" android:src= \"@drawable/logo\" /> </item> </layer-list> II. Declare custom style in your styles.xml using the new drawable as background. <style name= \"SplashTheme\" parent= \"Theme.AppCompat.NoActionBar\" > <item name= \"android:windowBackground\" > @drawable/background_splash </item> </style> Note If your API Level is greater than v19, you can make Status Bar and Navigation Bar translucent setting attributes android:windowTranslucentStatus and android:windowTranslucentNavigation to true . III. Apply this style to your splash activity via android:theme attribute in your AndroidManifest.xml file. <activity android:name= \".SplashActivity\" android:theme= \"@style/SplashTheme\" > <intent-filter> <action android:name= \"android.intent.action.MAIN\" /> <category android:name= \"android.intent.category.LAUNCHER\" /> </intent-filter> </activity>","title":"Launch screens"},{"location":"patterns/launch-screen/#launch-screens","text":"From google material design documentation . The launch screen is a user\u2019s first experience of your application. Because launching your app while displaying a blank canvas increases its perceived loading time, consider using a placeholder UI or a branded launch screen.","title":"Launch screens"},{"location":"patterns/launch-screen/#how-to-add","text":"I. Declare custom drawable.xml file with items for launch screen background. <layer-list xmlns:android= \"http://schemas.android.com/apk/res/android\" > <item android:drawable= \"@color/blue\" /> <item> <bitmap android:gravity= \"center\" android:src= \"@drawable/logo\" /> </item> </layer-list> II. Declare custom style in your styles.xml using the new drawable as background. <style name= \"SplashTheme\" parent= \"Theme.AppCompat.NoActionBar\" > <item name= \"android:windowBackground\" > @drawable/background_splash </item> </style> Note If your API Level is greater than v19, you can make Status Bar and Navigation Bar translucent setting attributes android:windowTranslucentStatus and android:windowTranslucentNavigation to true . III. Apply this style to your splash activity via android:theme attribute in your AndroidManifest.xml file. <activity android:name= \".SplashActivity\" android:theme= \"@style/SplashTheme\" > <intent-filter> <action android:name= \"android.intent.action.MAIN\" /> <category android:name= \"android.intent.category.LAUNCHER\" /> </intent-filter> </activity>","title":"How to add?"},{"location":"patterns/navigation-drawer/","text":"From Google material design documentation and android training . The navigation drawer slides in from the left. It is a common pattern found in Google apps and follows the keylines and metrics for lists. Normally represents the app\u2019s main navigation options on the left edge of the screen. It is hidden most of the time, but is revealed when the user swipes a finger from the left edge of the screen or, while at the top level of the app, the user touches the app icon in the toolbar. How to add? \u00b6 I. In your build.gradle file add the latest appcompat , design and support-v4 libraries. compile 'com.android.support:appcompat-v7:X.X.X' compile 'com.android.support:design:X.X.X' compile 'com.android.support:support-v4:X.X.X' // X.X.X specify the version II. Declare DrawerLayout as your root layout container, inside you will have two views, one containing your main layout and another containing drawer items. <android.support.v4.widget.DrawerLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:id= \"@+id/drawer_layout\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:fitsSystemWindows= \"true\" > <include layout= \"@layout/content_main\" /> <android.support.design.widget.NavigationView android:id= \"@+id/nav_view\" android:layout_width= \"wrap_content\" android:layout_height= \"match_parent\" android:layout_gravity= \"start\" android:fitsSystemWindows= \"true\" app:headerLayout= \"@layout/drawer_header\" app:menu= \"@menu/drawer_menu\" /> </android.support.v4.widget.DrawerLayout> In above example, @layout/content_main contains your main content and NavigationView drawers items. III. Create the menu file in your values folder values/menu.xml . <?xml version=\"1.0\" encoding=\"utf-8\"?> <menu xmlns:android= \"http://schemas.android.com/apk/res/android\" > <group android:checkableBehavior= \"single\" > <item android:id= \"@+id/nav_inbox\" android:checked= \"true\" android:icon= \"@drawable/ic_inbox_grey600_36dp\" android:title= \"@string/inbox\" /> <item android:id= \"@+id/nav_starred\" android:icon= \"@drawable/ic_star_grey600_36dp\" android:title= \"@string/starred\" /> <!-- more items --> <item android:id= \"@+id/subheader\" android:title= \"@string/subheader\" > <menu> <item android:id= \"@+id/nav_all_email\" android:icon= \"@drawable/ic_email_grey600_36dp\" android:title= \"@string/all_email\" /> <!-- more items --> </menu> </item> </group> </menu> The menu structure is hierarchical, that let's you separate your items in categories. IV. To add a header for your drawer, create a layout file in layout/drawer_header.xml . <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:layout_width= \"match_parent\" android:layout_height= \"@dimen/drawer_header_height\" android:gravity= \"bottom\" android:background= \"@drawable/navigation_background\" android:orientation= \"vertical\" android:padding= \"@dimen/activity_horizontal_margin\" android:theme= \"@style/ThemeOverlay.AppCompat.Dark\" > <ImageView android:id= \"@+id/drawer_profile_image\" android:layout_width= \"@dimen/drawer_header_profile\" android:layout_height= \"@dimen/drawer_header_profile\" android:layout_marginBottom= \"@dimen/standard_margin\" android:scaleType= \"centerCrop\" android:src= \"@drawable/alexandru_simonescu\" /> <TextView android:id= \"@+id/name\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"Alexandru Simonescu\" android:textAppearance= \"@style/TextAppearance.AppCompat.Body1\" android:textStyle= \"bold\" /> <TextView android:id= \"@+id/email\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"hi@alexsimo.com\" android:textAppearance= \"@style/TextAppearance.AppCompat.Body1\" style= \"@style/Widget.AppCompat.Spinner\" /> </LinearLayout> V. In your activity find the NavigationView and NavigationDrawer and set their listeners. Drawer setup. private void setupDrawer () { drawerLayout = ( DrawerLayout ) findViewById ( R . id . drawer_layout ); drawerLayout . setDrawerListener ( new DrawerLayout . DrawerListener () { @Override public void onDrawerSlide ( View drawerView , float slideOffset ) { } @Override public void onDrawerOpened ( View drawerView ) { } @Override public void onDrawerClosed ( View drawerView ) { } @Override public void onDrawerStateChanged ( int newState ) { } }); } Note To achieve the round image effect you can use Google's official way . Example using Google's RoundedBitmapDrawable : Bitmap bitmap = BitmapFactory . decodeResource ( getResources (), R . drawable . avatar ); RoundedBitmapDrawable rounded = RoundedBitmapDrawableFactory . create ( getResources (), avatar ); rounded . setCornerRadius ( bitmap . getWidth ()); ImageView drawerProfile = ( ImageView ) drawerLayout . findViewById ( R . id . drawer_profile_image ); drawerProfile . setImageDrawable ( rounded ); NavigationView setup. public void setupDrawerContent ( NavigationView navigationView ) { navigationView . setNavigationItemSelectedListener ( new NavigationView . OnNavigationItemSelectedListener () { @Override public boolean onNavigationItemSelected ( MenuItem item ) { item . setChecked ( true ); // manage menu item click drawerLayout . closeDrawers (); return true ; } }); } VI. If needed you can give some basic styling using the properties: android: background = \"@color/colorDrawer\" app: itemBackground = \"@color/colorDrawerItem\" The drawables colors should be selector defining for each pressed state - focused, checked, active, etc. Menu item background. <?xml version=\"1.0\" encoding=\"utf-8\"?> <selector xmlns:android= \"http://schemas.android.com/apk/res/android\" > <item android:drawable= \"@drawable/button_pressed\" android:state_pressed= \"true\" /> <item android:drawable= \"@drawable/button_focused\" android:state_focused= \"true\" /> <item android:drawable= \"@drawable/button_focused\" android:state_hovered= \"true\" /> <item android:drawable= \"@drawable/button_normal\" /> </selector>","title":"Navigation drawer"},{"location":"patterns/navigation-drawer/#how-to-add","text":"I. In your build.gradle file add the latest appcompat , design and support-v4 libraries. compile 'com.android.support:appcompat-v7:X.X.X' compile 'com.android.support:design:X.X.X' compile 'com.android.support:support-v4:X.X.X' // X.X.X specify the version II. Declare DrawerLayout as your root layout container, inside you will have two views, one containing your main layout and another containing drawer items. <android.support.v4.widget.DrawerLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:id= \"@+id/drawer_layout\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:fitsSystemWindows= \"true\" > <include layout= \"@layout/content_main\" /> <android.support.design.widget.NavigationView android:id= \"@+id/nav_view\" android:layout_width= \"wrap_content\" android:layout_height= \"match_parent\" android:layout_gravity= \"start\" android:fitsSystemWindows= \"true\" app:headerLayout= \"@layout/drawer_header\" app:menu= \"@menu/drawer_menu\" /> </android.support.v4.widget.DrawerLayout> In above example, @layout/content_main contains your main content and NavigationView drawers items. III. Create the menu file in your values folder values/menu.xml . <?xml version=\"1.0\" encoding=\"utf-8\"?> <menu xmlns:android= \"http://schemas.android.com/apk/res/android\" > <group android:checkableBehavior= \"single\" > <item android:id= \"@+id/nav_inbox\" android:checked= \"true\" android:icon= \"@drawable/ic_inbox_grey600_36dp\" android:title= \"@string/inbox\" /> <item android:id= \"@+id/nav_starred\" android:icon= \"@drawable/ic_star_grey600_36dp\" android:title= \"@string/starred\" /> <!-- more items --> <item android:id= \"@+id/subheader\" android:title= \"@string/subheader\" > <menu> <item android:id= \"@+id/nav_all_email\" android:icon= \"@drawable/ic_email_grey600_36dp\" android:title= \"@string/all_email\" /> <!-- more items --> </menu> </item> </group> </menu> The menu structure is hierarchical, that let's you separate your items in categories. IV. To add a header for your drawer, create a layout file in layout/drawer_header.xml . <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:layout_width= \"match_parent\" android:layout_height= \"@dimen/drawer_header_height\" android:gravity= \"bottom\" android:background= \"@drawable/navigation_background\" android:orientation= \"vertical\" android:padding= \"@dimen/activity_horizontal_margin\" android:theme= \"@style/ThemeOverlay.AppCompat.Dark\" > <ImageView android:id= \"@+id/drawer_profile_image\" android:layout_width= \"@dimen/drawer_header_profile\" android:layout_height= \"@dimen/drawer_header_profile\" android:layout_marginBottom= \"@dimen/standard_margin\" android:scaleType= \"centerCrop\" android:src= \"@drawable/alexandru_simonescu\" /> <TextView android:id= \"@+id/name\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"Alexandru Simonescu\" android:textAppearance= \"@style/TextAppearance.AppCompat.Body1\" android:textStyle= \"bold\" /> <TextView android:id= \"@+id/email\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"hi@alexsimo.com\" android:textAppearance= \"@style/TextAppearance.AppCompat.Body1\" style= \"@style/Widget.AppCompat.Spinner\" /> </LinearLayout> V. In your activity find the NavigationView and NavigationDrawer and set their listeners. Drawer setup. private void setupDrawer () { drawerLayout = ( DrawerLayout ) findViewById ( R . id . drawer_layout ); drawerLayout . setDrawerListener ( new DrawerLayout . DrawerListener () { @Override public void onDrawerSlide ( View drawerView , float slideOffset ) { } @Override public void onDrawerOpened ( View drawerView ) { } @Override public void onDrawerClosed ( View drawerView ) { } @Override public void onDrawerStateChanged ( int newState ) { } }); } Note To achieve the round image effect you can use Google's official way . Example using Google's RoundedBitmapDrawable : Bitmap bitmap = BitmapFactory . decodeResource ( getResources (), R . drawable . avatar ); RoundedBitmapDrawable rounded = RoundedBitmapDrawableFactory . create ( getResources (), avatar ); rounded . setCornerRadius ( bitmap . getWidth ()); ImageView drawerProfile = ( ImageView ) drawerLayout . findViewById ( R . id . drawer_profile_image ); drawerProfile . setImageDrawable ( rounded ); NavigationView setup. public void setupDrawerContent ( NavigationView navigationView ) { navigationView . setNavigationItemSelectedListener ( new NavigationView . OnNavigationItemSelectedListener () { @Override public boolean onNavigationItemSelected ( MenuItem item ) { item . setChecked ( true ); // manage menu item click drawerLayout . closeDrawers (); return true ; } }); } VI. If needed you can give some basic styling using the properties: android: background = \"@color/colorDrawer\" app: itemBackground = \"@color/colorDrawerItem\" The drawables colors should be selector defining for each pressed state - focused, checked, active, etc. Menu item background. <?xml version=\"1.0\" encoding=\"utf-8\"?> <selector xmlns:android= \"http://schemas.android.com/apk/res/android\" > <item android:drawable= \"@drawable/button_pressed\" android:state_pressed= \"true\" /> <item android:drawable= \"@drawable/button_focused\" android:state_focused= \"true\" /> <item android:drawable= \"@drawable/button_focused\" android:state_hovered= \"true\" /> <item android:drawable= \"@drawable/button_normal\" /> </selector>","title":"How to add?"},{"location":"patterns/notifications/","text":"Notifications with text \u00b6 Quote From Google material design documentation : Notifications inform your app\u2019s users about relevant and timely events in your app. You can create notifications to draw attention to messages from friends, alert a commuter to traffic slowdowns, show the progress of a new app being installed, and more. Notifications should be synced to all of a user\u2019s devices. How to add? \u00b6 I. In your build.gradle file add the latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // X.X.X specify the version } II. Get an instance of the NotificationCompat.Builder . NotificationCompat . Builder builder = new NotificationCompat . Builder ( context ); III. Create a Notification using Notification.Builder Notification notification = builder . setContentTitle ( \"Title\" ) . setContentText ( \"This is a notification!\" ) . setSmallIcon ( R . drawable . ic_notifications_white_small ) . build (); IV. Show the Notification with the method notify of NotificationManagerCompat with an id of your choice. NotificationManagerCompat notificationManager = NotificationManagerCompat . from ( context ); notificationManager . notify ( 0x1234 , notification ); Note Title, text and small icon are mandatory in order to show the notification. How to style? \u00b6 Use the method setColor(int color) of NotificationCompat.Builder to set the color of the round background your notification. Notification notification = new NotificationCompat . Builder ( context ) . setContentTitle ( \"Title\" ) . setContentText ( \"This is a notification!\" ) . setSmallIcon ( R . drawable . ic_bell ) . setColor ( Color . parseColor ( \"#4B8A08\" )) . build (); Notifications with images \u00b6 Use the method setLargeIcon(Bitmap) of NotificationCompat.Builder to use a big image next to the small icon. Notification notification = new NotificationCompat . Builder ( context ) . setContentTitle ( \"Title\" ) . setContentText ( \"This is a notification!\" ) . setSmallIcon ( R . drawable . ic_bell ) . setLargeIcon ( profileImageBitmap ) // Bitmap . setColor ( Color . parseColor ( \"#4B8A08\" )) . build (); Vibrating notifications \u00b6 Use the method setVibrate of NotificationCompat.Builder to create vibrate patterns accompanying the notification. long [] vibratePattern = new long [] { millisToWait , millisToVibrate , millisToWait , millisToVibrate } Notification notification = new NotificationCompat . Builder ( context ) . setContentTitle ( \"Title\" ) . setContentText ( \"This is a notification!\" ) . setSmallIcon ( R . drawable . ic_bell ) . setVibrate ( vibratePattern ) . build (); Note In order to use the vibration you will need to declare the android.permission.VIBRATE in your AndroidManifest.xml file. Notifications with lights \u00b6 Use the method setLights(int argb, int msOn, int msOff) of NotificationCompat.Builder to customize the color and the LED pattern shown by the device. Notification notification = new NotificationCompat . Builder ( context ) . setContentTitle ( \"Title\" ) . setContentText ( \"This is a notification!\" ) . setSmallIcon ( R . drawable . ic_bell ) . setLights ( Color . MAGENTA , onMillis , offMillis ) . build (); Tips and best practices \u00b6 I. Notify the user about time-sensitive information directed specifically at them. II. For notifications sent by another person, include that person's image. III. When the user touches a notification, enable the user to take immediate action. This may open a detail view, such as a message, or a summary view for multiple notifications. IV. The round cut is used by default when the setLargeIcon is not used and setSmallIcon method is used. When using the setLargeIcon the circular image has to be done manually. Expanded Notifications Layouts \u00b6 Quote From the Google Material Design documentation _ You can choose how much detail your app's notifications should provide. They can show the first few lines of a message or show a larger image preview. The additional information provides the user with more context, and\u2014in some cases\u2014may allow the user to read a message in its entirety. How to use it? \u00b6 I. Add the latest version of appcompat library on your build.gradle . dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // X.X.X especifica la versi\u00f3n } II. Retrieve an instance of NotificationCompat.Builder . NotificationCompat . Builder builder = new NotificationCompat . Builder ( context ); III. Apply a style to the NotificationCompat.Builder NotificationCompat . BigTextStyle style = new NotificationCompat . BigTextStyle ( builder ); IV. You have several styles available. // Big Text Style NotificationCompat . BigTextStyle style = new NotificationCompat . BigTextStyle ( builder ); // Big Picture Style NotificationCompat . BigPictureStyle style = new NotificationCompat . BigPictureStyle ( builder ); // Inbox Style NotificationCompat . InboxStyle style = new NotificationCompat . InboxStyle ( builder ); V. Build a Notification using the NotificationCompat.Builder Notification notification = builder . setContentTitle ( \"Title\" ) . setContentText ( \"This is a notification!\" ) . setSmallIcon ( R . drawable . ic_notifications_white_small ) . build (); VI. Pass along the Notification object via notify method from NotificationManagerCompat and assign an ID of your choice. NotificationManagerCompat notificationManager = NotificationManagerCompat . from ( context ); notificationManager . notify ( 0x1234 , notification ); Note Title, text and small icon are mandatory so the notification can be displayed. Big Text Style \u00b6 Big Text Style is used to show large quantities of text. The notification body can hold around 450 characters. The rest of the text will be trimmed without the use of an ellipsis. I. Apply the style by passing the builder to a NotificationCompat.BigTextStyle instance. NotificationCompat . BigTextStyle style = new NotificationCompat . BigTextStyle ( builder ); II. Set the long text you want to display on the expanded mode. style . bigText ( \"The path of...\" /* long text goes here */ ); Note For the compressed layout, the text set via setContentText of NotificationCompat.Builder will be shown. III. Use the method setBigContentTitle of NotificationCompat.BigTextStyle if you want a different title for the expanded layout form. style . bigText ( \"The path of...\" /* long text goes here */ ) . setBigContentTitle ( \"Expanded title\" ); Note If you do not call this method the title will fallback to the value you set on setContentTitle from NotificationCompat.Builder . IV. Add if you like an additional summary to the expanded layout form. style . bigText ( \"The path of...\" /* long text goes here */ ) . setBigContentTitle ( \"Expanded title\" ) . setSummaryText ( \"Summary text\" ); Big Picture Style \u00b6 Note Big Picture Style is used to show image-rich content. The image limits will be phone screen length by 256dp height. On Tablets, the image is 2:1 ratio. The rest of the image will be cropped with a ScaleType.CROP_CENTER . I. Create a new instance of NotificationCompat.BigPictureStyle which will accept a NotificationCompat.Builder instance. NotificationCompat . BigPictureStyle style = new NotificationCompat . BigPictureStyle ( builder ); Note Check how NotificationCompat.Builder are managed on the basic notifications article. II. Add the image you want to display by using BigPictureStyle.bigPicture method. The format of the image must be a Bitmap . Bitmap picture = BitmapFactory . decodeResource ( getResources (), R . drawable . conga ); style . bigPicture ( picture ); III. Add a new LargeIcon if you want to change it. In other case it will default to NotificationCompat.Builder.setLargeIcon(Bitmap) . Bitmap largeExpandedAvatar = BitmapFactory . decodeResource ( getResources (), R . drawable . koala_avatar ) style . bigPicture ( picture ) . bigLargeIcon ( largeExpandedAvatar ); IV. Add a new title for the expanded layout form. Bitmap picture = BitmapFactory . decodeResource ( getResources (), R . drawable . conga ); Bitmap largeExpandedAvatar = BitmapFactory . decodeResource ( getResources (), R . drawable . koala_avatar ) style . bigPicture ( picture ) . bigLargeIcon ( largeExpandedAvatar ); . setBigContentTitle ( \"Expanded title\" ) V. Add a summary which sums up the notification content. Bitmap picture = BitmapFactory . decodeResource ( getResources (), R . drawable . conga ); Bitmap largeExpandedAvatar = BitmapFactory . decodeResource ( getResources (), R . drawable . koala_avatar ) style . bigPicture ( picture ) . bigLargeIcon ( largeExpandedAvatar ); . setBigContentTitle ( \"Expanded title\" ) . setSummaryText ( \"Summary text\" ); Inbox Style \u00b6 Quote Inbox Style allows a notification made of several independent lines of short text, as in the normal notifications. This style accepts up to 7 lines. Any number above the notification will ellipsize further lines by adding a \"...\". I. Apply the style by creating a new NotificationCompat.BigPictureStyle instance. NotificationCompat . InboxStyle style = new NotificationCompat . InboxStyle ( builder ); II. Add as many lines as you wish. style . addLine ( \"This is line #\" + i ); III. Add a different title if you want by using setBigContentTitle . style . addLine ( \"This is line #\" + i ) . setBigContentTitle ( \"Expanded title\" ); IV. Optionally add a summary to the notification. style . addLine ( \"This is line #\" + i ) . setBigContentTitle ( \"Expanded title\" ) . setSummaryText ( \"Summary text\" ); Tricks and good practices \u00b6 I. Guidelines insist that every app should display a single notification at all times in order to keep the notification list clean. Use InboxStyle to join several notifications in one while providing a history of the last ones. II. Expanded layouts will be automatically displayed when the notification list have enough space, while compressing them otherwise. Play with different titles, LargeIcon and summaries to pick the interest of your user in both cases. If your notification is related to an image content, make it more attractive by using BigPictureStyle . III. If your notification does not require images and there is only one, using by default BigTextStyle will not hurt. In this way, you will ensure that you can accomodate as much text as possible and giving the user the maximum context available.","title":"Notifications"},{"location":"patterns/notifications/#notifications-with-text","text":"Quote From Google material design documentation : Notifications inform your app\u2019s users about relevant and timely events in your app. You can create notifications to draw attention to messages from friends, alert a commuter to traffic slowdowns, show the progress of a new app being installed, and more. Notifications should be synced to all of a user\u2019s devices.","title":"Notifications with text"},{"location":"patterns/notifications/#how-to-add","text":"I. In your build.gradle file add the latest appcompat library. dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // X.X.X specify the version } II. Get an instance of the NotificationCompat.Builder . NotificationCompat . Builder builder = new NotificationCompat . Builder ( context ); III. Create a Notification using Notification.Builder Notification notification = builder . setContentTitle ( \"Title\" ) . setContentText ( \"This is a notification!\" ) . setSmallIcon ( R . drawable . ic_notifications_white_small ) . build (); IV. Show the Notification with the method notify of NotificationManagerCompat with an id of your choice. NotificationManagerCompat notificationManager = NotificationManagerCompat . from ( context ); notificationManager . notify ( 0x1234 , notification ); Note Title, text and small icon are mandatory in order to show the notification.","title":"How to add?"},{"location":"patterns/notifications/#how-to-style","text":"Use the method setColor(int color) of NotificationCompat.Builder to set the color of the round background your notification. Notification notification = new NotificationCompat . Builder ( context ) . setContentTitle ( \"Title\" ) . setContentText ( \"This is a notification!\" ) . setSmallIcon ( R . drawable . ic_bell ) . setColor ( Color . parseColor ( \"#4B8A08\" )) . build ();","title":"How to style?"},{"location":"patterns/notifications/#notifications-with-images","text":"Use the method setLargeIcon(Bitmap) of NotificationCompat.Builder to use a big image next to the small icon. Notification notification = new NotificationCompat . Builder ( context ) . setContentTitle ( \"Title\" ) . setContentText ( \"This is a notification!\" ) . setSmallIcon ( R . drawable . ic_bell ) . setLargeIcon ( profileImageBitmap ) // Bitmap . setColor ( Color . parseColor ( \"#4B8A08\" )) . build ();","title":"Notifications with images"},{"location":"patterns/notifications/#vibrating-notifications","text":"Use the method setVibrate of NotificationCompat.Builder to create vibrate patterns accompanying the notification. long [] vibratePattern = new long [] { millisToWait , millisToVibrate , millisToWait , millisToVibrate } Notification notification = new NotificationCompat . Builder ( context ) . setContentTitle ( \"Title\" ) . setContentText ( \"This is a notification!\" ) . setSmallIcon ( R . drawable . ic_bell ) . setVibrate ( vibratePattern ) . build (); Note In order to use the vibration you will need to declare the android.permission.VIBRATE in your AndroidManifest.xml file.","title":"Vibrating notifications"},{"location":"patterns/notifications/#notifications-with-lights","text":"Use the method setLights(int argb, int msOn, int msOff) of NotificationCompat.Builder to customize the color and the LED pattern shown by the device. Notification notification = new NotificationCompat . Builder ( context ) . setContentTitle ( \"Title\" ) . setContentText ( \"This is a notification!\" ) . setSmallIcon ( R . drawable . ic_bell ) . setLights ( Color . MAGENTA , onMillis , offMillis ) . build ();","title":"Notifications with lights"},{"location":"patterns/notifications/#tips-and-best-practices","text":"I. Notify the user about time-sensitive information directed specifically at them. II. For notifications sent by another person, include that person's image. III. When the user touches a notification, enable the user to take immediate action. This may open a detail view, such as a message, or a summary view for multiple notifications. IV. The round cut is used by default when the setLargeIcon is not used and setSmallIcon method is used. When using the setLargeIcon the circular image has to be done manually.","title":"Tips and best practices"},{"location":"patterns/notifications/#expanded-notifications-layouts","text":"Quote From the Google Material Design documentation _ You can choose how much detail your app's notifications should provide. They can show the first few lines of a message or show a larger image preview. The additional information provides the user with more context, and\u2014in some cases\u2014may allow the user to read a message in its entirety.","title":"Expanded Notifications Layouts"},{"location":"patterns/notifications/#how-to-use-it","text":"I. Add the latest version of appcompat library on your build.gradle . dependencies { compile 'com.android.support:appcompat-v7:X.X.X' // X.X.X especifica la versi\u00f3n } II. Retrieve an instance of NotificationCompat.Builder . NotificationCompat . Builder builder = new NotificationCompat . Builder ( context ); III. Apply a style to the NotificationCompat.Builder NotificationCompat . BigTextStyle style = new NotificationCompat . BigTextStyle ( builder ); IV. You have several styles available. // Big Text Style NotificationCompat . BigTextStyle style = new NotificationCompat . BigTextStyle ( builder ); // Big Picture Style NotificationCompat . BigPictureStyle style = new NotificationCompat . BigPictureStyle ( builder ); // Inbox Style NotificationCompat . InboxStyle style = new NotificationCompat . InboxStyle ( builder ); V. Build a Notification using the NotificationCompat.Builder Notification notification = builder . setContentTitle ( \"Title\" ) . setContentText ( \"This is a notification!\" ) . setSmallIcon ( R . drawable . ic_notifications_white_small ) . build (); VI. Pass along the Notification object via notify method from NotificationManagerCompat and assign an ID of your choice. NotificationManagerCompat notificationManager = NotificationManagerCompat . from ( context ); notificationManager . notify ( 0x1234 , notification ); Note Title, text and small icon are mandatory so the notification can be displayed.","title":"How to use it?"},{"location":"patterns/notifications/#big-text-style","text":"Big Text Style is used to show large quantities of text. The notification body can hold around 450 characters. The rest of the text will be trimmed without the use of an ellipsis. I. Apply the style by passing the builder to a NotificationCompat.BigTextStyle instance. NotificationCompat . BigTextStyle style = new NotificationCompat . BigTextStyle ( builder ); II. Set the long text you want to display on the expanded mode. style . bigText ( \"The path of...\" /* long text goes here */ ); Note For the compressed layout, the text set via setContentText of NotificationCompat.Builder will be shown. III. Use the method setBigContentTitle of NotificationCompat.BigTextStyle if you want a different title for the expanded layout form. style . bigText ( \"The path of...\" /* long text goes here */ ) . setBigContentTitle ( \"Expanded title\" ); Note If you do not call this method the title will fallback to the value you set on setContentTitle from NotificationCompat.Builder . IV. Add if you like an additional summary to the expanded layout form. style . bigText ( \"The path of...\" /* long text goes here */ ) . setBigContentTitle ( \"Expanded title\" ) . setSummaryText ( \"Summary text\" );","title":"Big Text Style"},{"location":"patterns/notifications/#big-picture-style","text":"Note Big Picture Style is used to show image-rich content. The image limits will be phone screen length by 256dp height. On Tablets, the image is 2:1 ratio. The rest of the image will be cropped with a ScaleType.CROP_CENTER . I. Create a new instance of NotificationCompat.BigPictureStyle which will accept a NotificationCompat.Builder instance. NotificationCompat . BigPictureStyle style = new NotificationCompat . BigPictureStyle ( builder ); Note Check how NotificationCompat.Builder are managed on the basic notifications article. II. Add the image you want to display by using BigPictureStyle.bigPicture method. The format of the image must be a Bitmap . Bitmap picture = BitmapFactory . decodeResource ( getResources (), R . drawable . conga ); style . bigPicture ( picture ); III. Add a new LargeIcon if you want to change it. In other case it will default to NotificationCompat.Builder.setLargeIcon(Bitmap) . Bitmap largeExpandedAvatar = BitmapFactory . decodeResource ( getResources (), R . drawable . koala_avatar ) style . bigPicture ( picture ) . bigLargeIcon ( largeExpandedAvatar ); IV. Add a new title for the expanded layout form. Bitmap picture = BitmapFactory . decodeResource ( getResources (), R . drawable . conga ); Bitmap largeExpandedAvatar = BitmapFactory . decodeResource ( getResources (), R . drawable . koala_avatar ) style . bigPicture ( picture ) . bigLargeIcon ( largeExpandedAvatar ); . setBigContentTitle ( \"Expanded title\" ) V. Add a summary which sums up the notification content. Bitmap picture = BitmapFactory . decodeResource ( getResources (), R . drawable . conga ); Bitmap largeExpandedAvatar = BitmapFactory . decodeResource ( getResources (), R . drawable . koala_avatar ) style . bigPicture ( picture ) . bigLargeIcon ( largeExpandedAvatar ); . setBigContentTitle ( \"Expanded title\" ) . setSummaryText ( \"Summary text\" );","title":"Big Picture Style"},{"location":"patterns/notifications/#inbox-style","text":"Quote Inbox Style allows a notification made of several independent lines of short text, as in the normal notifications. This style accepts up to 7 lines. Any number above the notification will ellipsize further lines by adding a \"...\". I. Apply the style by creating a new NotificationCompat.BigPictureStyle instance. NotificationCompat . InboxStyle style = new NotificationCompat . InboxStyle ( builder ); II. Add as many lines as you wish. style . addLine ( \"This is line #\" + i ); III. Add a different title if you want by using setBigContentTitle . style . addLine ( \"This is line #\" + i ) . setBigContentTitle ( \"Expanded title\" ); IV. Optionally add a summary to the notification. style . addLine ( \"This is line #\" + i ) . setBigContentTitle ( \"Expanded title\" ) . setSummaryText ( \"Summary text\" );","title":"Inbox Style"},{"location":"patterns/notifications/#tricks-and-good-practices","text":"I. Guidelines insist that every app should display a single notification at all times in order to keep the notification list clean. Use InboxStyle to join several notifications in one while providing a history of the last ones. II. Expanded layouts will be automatically displayed when the notification list have enough space, while compressing them otherwise. Play with different titles, LargeIcon and summaries to pick the interest of your user in both cases. If your notification is related to an image content, make it more attractive by using BigPictureStyle . III. If your notification does not require images and there is only one, using by default BigTextStyle will not hurt. In this way, you will ensure that you can accomodate as much text as possible and giving the user the maximum context available.","title":"Tricks and good practices"},{"location":"patterns/swipe-to-refresh/","text":"Swipe to refresh \u00b6 From the Google Material Design documentation Swipe to refresh manually refreshes screen content with a user action or gesture. How to add? \u00b6 I. Add the last version of the support-v4 library to your build.gradle file. dependencies { compile 'com.android.support:support-v4:X.X.X' // where X.X.X is the last version available } II. Create your layout file and declare SwipeRefreshLayout inside. This view is usually along with lists, but you can use it with any view that fits your design. <android.support.v4.widget.SwipeRefreshLayout android:id= \"@+id/swipe_refresh_layout\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" > <ListView android:id= \"@+id/listview\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> </android.support.v4.widget.SwipeRefreshLayout> III. Proceed with the refresh listening the events in the Activity using a SwipeRefreshLayout.OnRefreshListener instance. SwipeRefreshLayout swipeRefreshLayout = ( SwipeRefreshLayout ) findViewById ( R . id . activity_main_swipe_refresh_layout ); swipeRefreshLayout . setOnRefreshListener ( new SwipeRefreshLayout . OnRefreshListener () { @Override public void onRefresh () { refreshData (); } }); IV. To cancel the progress animation use setRefreshing method. swipeRefreshLayout . setRefreshing ( false ); How to style? \u00b6 To define your own color scheme for the loading icon. I. Define the colors you want to use it. <resources> <color name= \"pink\" > #FF4081 </color> <color name= \"indigo\" > #3F51B5 </color> <color name= \"lime\" > #CDDC39 </color> </resources> II. Assign the colors to the view with the setColorSchemeResources method. swipeRefreshLayout . setColorSchemeResources ( R . color . pink , R . color . indigo , R . color . lime );","title":"Swipe to refresh"},{"location":"patterns/swipe-to-refresh/#swipe-to-refresh","text":"From the Google Material Design documentation Swipe to refresh manually refreshes screen content with a user action or gesture.","title":"Swipe to refresh"},{"location":"patterns/swipe-to-refresh/#how-to-add","text":"I. Add the last version of the support-v4 library to your build.gradle file. dependencies { compile 'com.android.support:support-v4:X.X.X' // where X.X.X is the last version available } II. Create your layout file and declare SwipeRefreshLayout inside. This view is usually along with lists, but you can use it with any view that fits your design. <android.support.v4.widget.SwipeRefreshLayout android:id= \"@+id/swipe_refresh_layout\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" > <ListView android:id= \"@+id/listview\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> </android.support.v4.widget.SwipeRefreshLayout> III. Proceed with the refresh listening the events in the Activity using a SwipeRefreshLayout.OnRefreshListener instance. SwipeRefreshLayout swipeRefreshLayout = ( SwipeRefreshLayout ) findViewById ( R . id . activity_main_swipe_refresh_layout ); swipeRefreshLayout . setOnRefreshListener ( new SwipeRefreshLayout . OnRefreshListener () { @Override public void onRefresh () { refreshData (); } }); IV. To cancel the progress animation use setRefreshing method. swipeRefreshLayout . setRefreshing ( false );","title":"How to add?"},{"location":"patterns/swipe-to-refresh/#how-to-style","text":"To define your own color scheme for the loading icon. I. Define the colors you want to use it. <resources> <color name= \"pink\" > #FF4081 </color> <color name= \"indigo\" > #3F51B5 </color> <color name= \"lime\" > #CDDC39 </color> </resources> II. Assign the colors to the view with the setColorSchemeResources method. swipeRefreshLayout . setColorSchemeResources ( R . color . pink , R . color . indigo , R . color . lime );","title":"How to style?"}]}